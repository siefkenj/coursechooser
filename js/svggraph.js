// Generated by CoffeeScript 1.4.0
/*
# Code to render a parsed xdot file as an SVG
*/

var SVGDot, css, css2json, renderCurrent, renderDotGraph, renderToSvg;

SVGDot = (function() {
  var abs, addEasyAttrs, ceil, createElm, createElmNS, round, sanitizeId;

  createElm = function(name, attrs, parent) {
    var elm, k, v;
    if (attrs == null) {
      attrs = {};
    }
    elm = document.createElement(name);
    for (k in attrs) {
      v = attrs[k];
      elm.setAttribute(k, v);
    }
    if (parent != null) {
      parent.appendChild(elm);
    }
    return addEasyAttrs(elm);
  };

  createElmNS = function(name, attrs, parent) {
    var elm, k, v;
    if (attrs == null) {
      attrs = {};
    }
    elm = document.createElementNS("http://www.w3.org/2000/svg", name);
    for (k in attrs) {
      v = attrs[k];
      elm.setAttribute(k, v);
    }
    if (parent != null) {
      parent.appendChild(elm);
    }
    return addEasyAttrs(elm);
  };

  addEasyAttrs = function(elm) {
    elm.attr = function(attr) {
      var name, ret, val, _i, _len, _ref;
      if (!(attr != null)) {
        ret = {};
        _ref = elm.attributes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          attr = _ref[_i];
          ret[attr.name] = attr.value;
        }
        return ret;
      }
      if (typeof attr === 'string') {
        return elm.getAttribute(attr);
      }
      for (name in attr) {
        val = attr[name];
        elm.setAttribute(name, val);
      }
      return elm;
    };
    return elm;
  };

  sanitizeId = function(str) {
    return ('' + str).replace(/\W+/g, '-');
  };

  round = function(n, digits) {
    var scale;
    if (digits == null) {
      digits = 0;
    }
    switch (digits) {
      case 0:
        return Math.round(n);
      case 1:
        scale = 10;
        break;
      case 2:
        scale = 100;
        break;
      default:
        scale = Math.pow(10, digits);
    }
    return Math.round(n * scale) / scale;
  };

  ceil = Math.ceil;

  abs = Math.abs;

  function SVGDot(ast) {
    var height, width;
    this.graph = new XDotGraph(ast);
    this.graph.NEGATE_Y_COORD = true;
    this.graph.walk();
    this.boundingBox = {
      x: this.graph.rootGraph.attrs.bb[0],
      y: this.graph.rootGraph.attrs.bb[3],
      width: abs(this.graph.rootGraph.attrs.bb[2] - this.graph.rootGraph.attrs.bb[0]),
      height: abs(this.graph.rootGraph.attrs.bb[3] - this.graph.rootGraph.attrs.bb[1])
    };
    this.svg = createElmNS('svg');
    width = Math.round(this.boundingBox.width + this.PADDING);
    height = Math.round(this.boundingBox.height + 1.5 * this.PADDING + this.HEADING_HEIGHT);
    this.svg.attr({
      width: width,
      height: height,
      aspect: width / height,
      viewBox: "0,0," + width + "," + height,
      xmlns: "http://www.w3.org/2000/svg"
    });
    this.defs = createElmNS('defs', {}, this.svg);
  }

  SVGDot.prototype.PADDING = 27;

  SVGDot.prototype.GRADIENT_WIDTH = 8;

  SVGDot.prototype.HEADING_HEIGHT = 40;

  SVGDot.prototype.UVIC_LOGO_PATH = "M 0 0 L 0 95.34375 C 0 145.71875 47.2445 177.78125 71.9375 177.78125 C 96.512499 177.78125 143.5 145.71774 143.5 95.34375 L 143.5 0 L 0 0 z M 17.375 8.71875 C 20.245679 8.6527337 23.373313 10.630931 24.5 17.6875 C 29.021001 20.227494 29.989249 21.85576 31.90625 23.96875 C 34.22125 25.203749 45.234251 24.452512 46.90625 23.8125 C 45.701251 27.607495 41.9375 29.95226 40.9375 30.53125 C 44.1115 32.090247 48.072499 33.476502 51.6875 33.3125 C 49.5745 35.309504 47.4645 35.988498 43.1875 36.9375 C 43.252503 36.988434 47.392249 38.95674 51.78125 37.71875 C 49.63925 40.844756 47.307 42.237505 43.875 43.8125 C 44.263999 47.490496 44.55275 48.821743 43.34375 54.71875 C 40.854749 49.563746 35.259499 43.913002 31.6875 41.25 C 31.3305 42.761995 31.04825 48.553505 35.78125 52.3125 C 31.36925 52.621491 28.198251 49.759506 26.28125 48.4375 C 24.531251 50.27651 19.31475 51.512498 17.46875 51.0625 C 18.65575 49.509511 20.102249 47.353745 20.78125 44.34375 C 19.58825 44.582843 17.1965 44.88601 14.4375 44.5 C 17.884501 40.365009 17.486751 37.013494 16.84375 35.3125 C 14.550751 32.597501 12.461501 28.1125 12.8125 21.5625 C 12.5095 19.175505 12.458249 16.944252 7.40625 14.28125 C 7.40625 14.28125 10.650499 12.883245 12.0625 11.28125 C 13.086687 10.116619 15.142249 8.7701537 17.375 8.71875 z M 60.125 9.03125 C 62.995679 8.9652337 66.029563 10.943431 67.15625 18 C 71.677251 20.539994 72.739249 22.13701 74.65625 24.25 C 76.97125 25.484999 87.953001 24.733762 89.625 24.09375 C 88.420001 27.888745 84.6875 30.26476 83.6875 30.84375 C 86.8615 32.402747 90.791249 33.789002 94.40625 33.625 C 92.29325 35.622004 90.12075 36.300998 85.84375 37.25 C 85.908753 37.300934 90.110999 39.26924 94.5 38.03125 C 92.358 41.157256 90.057 42.550005 86.625 44.125 C 87.013999 47.802996 87.2715 49.040493 86.0625 54.9375 C 83.573499 49.782496 77.978249 44.225502 74.40625 41.5625 C 74.04925 43.074495 73.767 48.866005 78.5 52.625 C 74.088 52.933991 70.854501 50.072006 68.9375 48.75 C 67.187501 50.58901 62.0335 51.762498 60.1875 51.3125 C 61.3745 49.759511 62.758499 47.603745 63.4375 44.59375 C 62.2445 44.832843 59.9465 45.198881 57.1875 44.8125 C 60.634501 40.677509 60.143001 37.325994 59.5 35.625 C 57.207001 32.910001 55.211501 28.425 55.5625 21.875 C 55.2595 19.488005 55.208249 17.256752 50.15625 14.59375 C 50.15625 14.59375 53.306749 13.101995 54.71875 11.5 C 55.742937 10.335369 57.892249 9.0826537 60.125 9.03125 z M 103 9.28125 C 105.87068 9.2152337 108.90456 11.255931 110.03125 18.3125 C 114.55225 20.852494 115.61425 22.38701 117.53125 24.5 C 119.84625 25.734999 130.828 24.983762 132.5 24.34375 C 131.295 28.138745 127.5625 30.48351 126.5625 31.0625 C 129.7365 32.621497 133.6975 34.007752 137.3125 33.84375 C 135.1995 35.840754 132.99575 36.519748 128.71875 37.46875 C 128.78375 37.519684 132.98599 39.48799 137.375 38.25 C 135.233 41.376006 132.8695 42.768755 129.4375 44.34375 C 129.8265 48.021746 130.17775 49.352993 128.96875 55.25 C 126.47975 50.094996 120.85325 44.475502 117.28125 41.8125 C 116.92425 43.324495 116.642 49.084755 121.375 52.84375 C 116.963 53.152741 113.7295 50.322006 111.8125 49 C 110.0625 50.83901 104.9085 52.074998 103.0625 51.625 C 104.2495 50.072011 105.6335 47.916245 106.3125 44.90625 C 105.1195 45.145343 102.8215 45.44851 100.0625 45.0625 C 103.5095 40.927509 103.018 37.544744 102.375 35.84375 C 100.082 33.128751 98.086501 28.64375 98.4375 22.09375 C 98.1345 19.706755 98.083249 17.506752 93.03125 14.84375 C 93.03125 14.84375 96.181749 13.414495 97.59375 11.8125 C 98.617937 10.647869 100.76725 9.3326537 103 9.28125 z M 16.6875 10.71875 C 16.504811 10.717297 16.3269 10.729107 16.15625 10.75 C 15.132353 10.875357 14.259001 11.301411 13.6875 11.75 C 12.066499 13.023001 9.90625 14.53125 9.90625 14.53125 C 12.71425 16.421244 14.279501 17.477999 14.4375 21.25 C 15.160499 36.174001 20.70825 35.57725 23.40625 37.15625 C 23.606252 45.176261 21.537751 47.276256 20.09375 49.90625 C 24.95675 48.295256 25.398501 45.254008 26.4375 42.875 C 27.421501 47.711 28.955499 48.830493 31.4375 50.0625 C 30.8005 48.830493 28.460251 41.061244 29.65625 37.78125 C 31.811251 38.184246 39.532751 45.164 42.34375 50 C 42.903751 43.93501 40.218751 42.522749 39.09375 40.71875 C 39.98175 41.615755 45.13075 41.995242 47.21875 39.78125 C 42.993749 39.411262 41.16225 38.434508 39.40625 37.5625 C 28.501249 37.64261 25.078749 34.562259 23.71875 33.90625 C 20.12775 32.182261 15.251 23.244757 20.625 22.09375 C 25.996001 20.948751 30.176 27.89176 29.375 30.84375 C 28.841999 28.904751 27.753751 27.434504 24.96875 25.4375 C 22.27675 23.501493 16.856501 24.242497 20.9375 29.0625 C 25.471499 34.420498 31.604001 32.487008 34 31.75 C 31.909999 34.136006 29.798 33.939758 27.75 33.84375 C 32.724001 36.296761 36.950249 34.396009 39.03125 33 C 38.691249 33.996994 38.125001 34.488742 37 35.46875 C 39.086999 35.46875 43.230499 35.456658 46.4375 34.3125 C 42.5885 34.209396 34.596501 29.748755 31.0625 26.34375 C 27.371499 22.777759 27.374999 21.885743 22.5 19.09375 C 22.297501 12.891238 19.623008 10.950991 17.21875 10.75 C 17.03843 10.734918 16.870189 10.720203 16.6875 10.71875 z M 59.40625 11.03125 C 59.223561 11.029797 59.04565 11.041607 58.875 11.0625 C 57.851103 11.187857 56.977751 11.613911 56.40625 12.0625 C 54.785249 13.335501 52.625 14.84375 52.625 14.84375 C 55.433 16.733744 57.029501 17.790499 57.1875 21.5625 C 57.910499 36.486501 63.45825 35.82725 66.15625 37.40625 C 66.356252 45.426261 64.256501 47.588756 62.8125 50.21875 C 67.6755 48.607756 68.117251 45.566508 69.15625 43.1875 C 70.140251 48.0235 71.705499 49.142993 74.1875 50.375 C 73.5505 49.142993 71.210251 41.373744 72.40625 38.09375 C 74.561251 38.496746 82.251501 45.4765 85.0625 50.3125 C 85.622501 44.24751 82.937501 42.835249 81.8125 41.03125 C 82.7005 41.928255 87.8495 42.245242 89.9375 40.03125 C 85.712499 39.661262 83.8185 38.747008 82.0625 37.875 C 71.157499 37.95511 67.797499 34.874759 66.4375 34.21875 C 62.8465 32.494761 57.90725 23.557257 63.28125 22.40625 C 68.652251 21.261251 72.89475 28.17301 72.09375 31.125 C 71.560749 29.186001 70.410001 27.715754 67.625 25.71875 C 64.933 23.782743 59.512751 24.461247 63.59375 29.28125 C 68.127749 34.639248 74.322751 32.737008 76.71875 32 C 74.628749 34.386006 72.51675 34.252258 70.46875 34.15625 C 75.442751 36.609261 79.668999 34.614759 81.75 33.21875 C 81.409999 34.215744 80.875001 34.801242 79.75 35.78125 C 81.836999 35.78125 85.949249 35.769158 89.15625 34.625 C 85.30725 34.521896 77.252751 30.061255 73.71875 26.65625 C 70.027749 23.090259 69.999999 22.198243 65.125 19.40625 C 64.922501 13.203738 62.373008 11.263491 59.96875 11.0625 C 59.78843 11.047418 59.588939 11.032703 59.40625 11.03125 z M 102.28125 11.25 C 102.09856 11.248547 101.92065 11.260357 101.75 11.28125 C 100.7261 11.406607 99.852751 11.832661 99.28125 12.28125 C 97.660249 13.554251 95.5 15.0625 95.5 15.0625 C 98.308 16.952494 99.904501 18.009249 100.0625 21.78125 C 100.7855 36.705251 106.33325 36.13975 109.03125 37.71875 C 109.23125 45.738761 107.1315 47.838756 105.6875 50.46875 C 110.5505 48.857756 110.99225 45.816508 112.03125 43.4375 C 113.01525 48.2735 114.5805 49.392993 117.0625 50.625 C 116.4255 49.392993 114.08525 41.592494 115.28125 38.3125 C 117.43625 38.715496 125.15775 45.69525 127.96875 50.53125 C 128.52875 44.46626 125.84375 43.053999 124.71875 41.25 C 125.60675 42.147005 130.7245 42.557742 132.8125 40.34375 C 128.5875 39.973762 126.6935 38.965758 124.9375 38.09375 C 114.0325 38.17386 110.70375 35.124759 109.34375 34.46875 C 105.75275 32.744761 100.78225 23.869757 106.15625 22.71875 C 111.52725 21.573751 115.76975 28.42301 114.96875 31.375 C 114.43575 29.436001 113.285 27.965754 110.5 25.96875 C 107.808 24.032743 102.38775 24.773747 106.46875 29.59375 C 111.00275 34.951748 117.229 33.049508 119.625 32.3125 C 117.535 34.698506 115.39175 34.471008 113.34375 34.375 C 118.31775 36.828011 122.544 34.927259 124.625 33.53125 C 124.285 34.528244 123.75 35.113742 122.625 36.09375 C 124.712 36.09375 128.8555 35.988774 132.0625 34.84375 C 128.2135 34.740646 120.12775 30.280005 116.59375 26.875 C 112.90275 23.309009 112.90625 22.416993 108.03125 19.625 C 107.82875 13.422488 105.24801 11.482241 102.84375 11.28125 C 102.66343 11.266168 102.46394 11.251453 102.28125 11.25 z M 16.46875 12.4375 C 17.244374 12.497088 18.066249 12.901745 18.78125 13.84375 C 18.222251 14.200757 17.95775 14.368751 17.46875 14.59375 C 16.980749 14.821716 15.712251 15.58186 14.15625 14.6875 C 14.15625 14.6875 13.1185 14.067753 12.6875 14.21875 C 12.6875 14.21875 12.633989 14.00614 12.75 13.90625 C 12.824002 13.845179 13.081999 13.890494 13.375 13.6875 C 13.455011 13.622473 13.506742 13.498324 13.59375 13.4375 C 14.26875 13.817501 15.890501 14.341995 16.6875 13.75 C 15.665499 13.907994 14.683249 13.335491 14.28125 13.0625 C 14.948751 12.666996 15.693126 12.377863 16.46875 12.4375 z M 59.1875 12.75 C 59.963124 12.809588 60.722499 13.214245 61.4375 14.15625 C 60.878501 14.513257 60.614 14.618751 60.125 14.84375 C 59.636999 15.071716 58.431011 15.893989 56.875 15 C 56.875 15 55.83726 14.380253 55.40625 14.53125 C 55.40625 14.53125 55.352739 14.31864 55.46875 14.21875 C 55.542728 14.157679 55.800749 14.202994 56.09375 14 C 56.173761 13.934973 56.256742 13.810824 56.34375 13.75 C 57.01875 14.130001 58.609261 14.592366 59.40625 14 C 58.384259 14.157994 57.33949 13.647991 56.9375 13.375 C 57.605001 12.979496 58.411876 12.690363 59.1875 12.75 z M 102.0625 12.96875 C 102.83812 13.028338 103.5975 13.432995 104.3125 14.375 C 103.7535 14.732007 103.489 14.931251 103 15.15625 C 102.512 15.384216 101.30601 16.206489 99.75 15.3125 C 99.75 15.3125 98.71226 14.599003 98.28125 14.75 C 98.28125 14.75 98.258989 14.630893 98.375 14.53125 C 98.449002 14.470179 98.675749 14.421744 98.96875 14.21875 C 99.048761 14.153723 99.131742 14.060824 99.21875 14 C 99.89375 14.380001 101.51549 14.873245 102.3125 14.28125 C 101.2905 14.439244 100.24575 13.866741 99.84375 13.59375 C 100.51125 13.198246 101.28688 12.909113 102.0625 12.96875 z M 277.09375 19.65625 C 273.80075 19.65625 271.58075 21.98775 271.59375 24.96875 C 271.58175 27.92775 273.746 30.28125 277 30.28125 L 277.0625 30.28125 C 280.4485 30.28125 282.60675 27.92675 282.59375 24.96875 C 282.56175 21.96575 280.41875 19.65625 277.09375 19.65625 z M 431.46875 19.65625 C 428.17575 19.65625 425.95575 21.98775 425.96875 24.96875 C 425.95575 27.92775 428.09575 30.28125 431.34375 30.28125 L 431.40625 30.28125 C 434.79525 30.28125 436.9475 27.92675 436.9375 24.96875 C 436.9025 21.96575 434.79075 19.65625 431.46875 19.65625 z M 179.03125 21.8125 L 179.03125 51.03125 C 179.03125 67.09125 186.727 73.6875 198.5 73.6875 C 210.828 73.6875 218.90625 66.69075 218.90625 50.96875 L 218.90625 21.8125 L 209.59375 21.8125 L 209.59375 51.5625 C 209.59375 61.5825 205.55775 66.1875 198.84375 66.1875 C 192.52175 66.1875 188.375 61.5375 188.375 51.5625 L 188.375 21.8125 L 179.03125 21.8125 z M 43.71875 26.03125 C 40.345749 26.912258 35.467499 26.333359 34.0625 26.125 C 34.281491 26.324038 34.53025 26.540998 34.78125 26.75 C 35.27025 27.174012 36.683 28.156254 38.625 29.28125 C 39.210999 29.152185 41.223751 28.578241 43.71875 26.03125 z M 86.375 26.34375 C 83.001999 27.224758 78.217499 26.645859 76.8125 26.4375 C 77.031491 26.636538 77.249 26.822248 77.5 27.03125 C 77.989 27.455262 79.433 28.468754 81.375 29.59375 C 81.960999 29.464685 83.880001 28.890741 86.375 26.34375 z M 458.34375 26.5 L 449.21875 29.125 L 449.21875 35.96875 L 443.9375 35.96875 L 443.9375 42.9375 L 449.21875 42.9375 L 449.21875 60.28125 C 449.21875 65.11125 450.118 68.502 452.125 70.625 C 453.855 72.494 456.696 73.65625 460.125 73.65625 C 463.063 73.65625 465.5355 73.2145 466.9375 72.6875 L 466.71875 65.59375 C 465.66375 65.88275 464.78475 66 463.09375 66 C 459.53075 66 458.34375 63.6995 458.34375 59.1875 L 458.34375 42.9375 L 467.21875 42.9375 L 467.21875 35.96875 L 458.34375 35.96875 L 458.34375 26.5 z M 129.28125 26.59375 C 125.90825 27.474758 121.0925 26.864609 119.6875 26.65625 C 119.90649 26.855288 120.124 27.072248 120.375 27.28125 C 120.864 27.705262 122.308 28.687504 124.25 29.8125 C 124.836 29.683435 126.78625 29.140741 129.28125 26.59375 z M 343.71875 35.09375 C 332.57452 35.66828 326.78125 45.017969 326.78125 54.875 C 326.78125 66.175 333.81225 73.59375 345.78125 73.59375 C 351.13225 73.59375 355.49725 72.588 358.65625 71.25 L 357.28125 64.8125 C 354.46425 65.8485 351.38375 66.53125 347.09375 66.53125 C 341.12475 66.53125 335.97275 63.6195 335.71875 56.9375 L 360.375 57 C 360.555 56.138 360.6875 54.733 360.6875 53 C 360.6875 44.922 356.8015 35.09375 344.8125 35.09375 C 344.44187 35.09375 344.07824 35.075217 343.71875 35.09375 z M 249.40625 35.15625 C 243.28325 35.15625 239.28725 38.66625 237.65625 41.53125 L 237.4375 41.53125 L 236.96875 35.96875 L 228.8125 35.96875 C 228.9865 39.16175 229.125 42.6805 229.125 46.9375 L 229.125 72.84375 L 238.4375 72.84375 L 238.4375 51.15625 C 238.4375 50.09525 238.589 48.9535 238.875 48.1875 C 239.85 45.3385 242.411 42.71875 246.125 42.71875 C 251.216 42.71875 253.15625 46.7725 253.15625 52.0625 L 253.15625 72.84375 L 262.5 72.84375 L 262.5 50.96875 C 262.5 39.30575 255.83425 35.15625 249.40625 35.15625 z M 386.75 35.15625 C 382.775 35.15625 378.47025 37.807 376.65625 43 L 376.40625 43 L 376.03125 35.96875 L 367.96875 35.96875 C 368.16875 39.25475 368.28125 42.90475 368.28125 47.84375 L 368.21875 72.84375 L 377.53125 72.84375 L 377.53125 53.71875 C 377.53125 52.71575 377.62725 51.7575 377.78125 50.9375 C 378.61725 46.7085 381.681 43.875 386.125 43.875 C 387.244 43.875 388.0695 43.958 388.9375 44.125 L 388.9375 35.34375 C 388.1965 35.17575 387.664 35.15625 386.75 35.15625 z M 407.8125 35.15625 C 399.2105 35.15625 393.8125 40.2045 393.8125 46.6875 C 393.7795 51.0585 396.81425 54.99575 404.03125 57.46875 C 408.56525 59.07875 410.0625 60.34475 410.0625 62.84375 C 410.0625 65.25875 408.229 66.96875 404.125 66.96875 C 400.787 66.96875 396.77675 65.55425 394.71875 64.28125 L 392.84375 71.0625 C 395.55875 72.5775 399.63375 73.65625 404.09375 73.65625 C 413.83175 73.65625 419.0625 68.7865 419.0625 62.0625 C 419.0305 56.6285 415.92975 53.21975 409.21875 50.84375 C 404.56275 49.14275 402.78125 48.0255 402.78125 45.6875 C 402.78125 43.4175 404.6245 41.78125 407.9375 41.78125 C 411.2045 41.78125 414.2 43.02525 415.75 43.90625 L 417.59375 37.34375 C 415.42875 36.15675 411.8705 35.15625 407.8125 35.15625 z M 272.4375 35.96875 L 272.4375 72.84375 L 281.75 72.84375 L 281.75 35.96875 L 272.4375 35.96875 z M 287.59375 35.96875 L 301.3125 72.84375 L 310.5 72.84375 L 324.5625 35.96875 L 314.75 35.96875 L 308.9375 54.71875 C 307.9445 57.98175 307.09425 60.85425 306.40625 63.90625 L 306.1875 63.90625 C 305.4985 60.90625 304.7365 57.95975 303.6875 54.71875 L 297.6875 35.96875 L 287.59375 35.96875 z M 426.78125 35.96875 L 426.78125 72.84375 L 436.125 72.84375 L 436.125 35.96875 L 426.78125 35.96875 z M 471.84375 35.96875 L 485.40625 69.84375 C 485.79525 70.71275 485.875 71.25125 485.875 71.65625 C 485.875 72.11325 485.6785 72.64425 485.3125 73.28125 C 484.0255 75.81825 481.9625 77.99225 480.1875 79.15625 C 478.3165 80.47125 476.33825 81.33275 474.78125 81.71875 L 476.90625 89.5625 C 479.22125 89.2535 483.0215 88.04375 486.6875 84.84375 C 491.0285 81.01675 494.438 74.91925 499.5 61.15625 L 508.71875 35.96875 L 498.78125 35.96875 L 493.03125 55.6875 C 492.34325 58.0645 491.6415 60.83525 491.0625 62.90625 L 490.84375 62.90625 C 490.30375 60.85825 489.49 58.033 488.75 55.75 L 482.125 35.96875 L 471.84375 35.96875 z M 19 37.3125 C 19.022994 39.756511 17.786501 41.894496 17.0625 43.1875 C 19.2205 43.16772 20.41375 42.890504 21.09375 42.5625 C 21.22875 41.321493 21.205241 39.973748 21.03125 38.46875 C 20.46125 38.278861 19.742999 37.853512 19 37.3125 z M 61.75 37.625 C 61.772994 40.069011 60.442751 42.206996 59.71875 43.5 C 61.87675 43.48022 63.07 43.203004 63.75 42.875 C 63.885 41.633993 63.923991 40.223748 63.75 38.71875 C 63.18 38.528861 62.492999 38.166012 61.75 37.625 z M 104.625 37.9375 C 104.64799 40.381511 103.349 42.456996 102.625 43.75 C 104.783 43.73022 105.945 43.453004 106.625 43.125 C 106.76 41.883993 106.79899 40.536248 106.625 39.03125 C 106.055 38.841361 105.368 38.478512 104.625 37.9375 z M 344.25 41.4375 C 350.495 41.4375 351.9755 47.0255 351.9375 50.4375 L 335.6875 50.4375 C 336.0995 46.6655 338.513 41.4375 344.25 41.4375 z M 4.03125 67.0625 L 139.53125 67.0625 L 139.46875 74.1875 L 94.1875 74.1875 C 94.93003 74.662224 95.71008 75.098969 96.4375 75.65625 L 139.46875 75.65625 L 139.46875 83.125 L 117.125 83.125 C 117.43244 83.642671 117.8021 84.089678 118.15625 84.59375 L 139.46875 84.59375 L 139.46875 92.03125 L 124.25 92.09375 L 124.09375 93.65625 L 139.46875 93.65625 L 139.46875 95.34375 C 139.46875 97.260842 139.38769 99.139281 139.25 101 L 123.40625 101 L 123.25 102.53125 L 139.09375 102.53125 C 138.85495 105.06294 138.53752 107.51661 138.0625 109.9375 L 122.53125 109.9375 L 122.40625 111.5 L 137.78125 111.5 C 137.22235 114.0663 136.48625 116.56692 135.6875 119 L 121.6875 119 L 121.53125 120.46875 L 135.21875 120.46875 C 134.32146 123.02657 133.35015 125.47532 132.21875 127.875 L 120.84375 127.875 L 120.6875 129.4375 L 131.4375 129.4375 C 130.1554 132.01072 128.69914 134.46746 127.1875 136.84375 L 120 137 L 119.84375 138.53125 L 126.09375 138.46875 C 124.37508 141.03792 122.55862 143.49577 120.625 145.8125 L 22.9375 145.8125 C 21.323284 143.88878 19.780922 141.87958 18.3125 139.78125 L 24.8125 139.6875 L 24.65625 138.15625 L 17.21875 138.21875 C 15.360825 135.43455 13.661075 132.50219 12.125 129.4375 L 23.8125 129.4375 L 23.65625 127.875 L 11.5 127.875 L 11.5 128.09375 C 10.314363 125.61638 9.2153306 123.11558 8.28125 120.46875 L 22.9375 120.46875 L 22.78125 119 L 7.8125 119 C 7.0100786 116.57031 6.3430879 114.06259 5.78125 111.5 L 22.09375 111.5 L 21.9375 109.9375 L 5.5 109.9375 C 5.02157 107.51475 4.6466679 105.06496 4.40625 102.53125 L 21.25 102.53125 L 21.09375 101 L 4.25 101 C 4.1114648 99.139232 4.03125 97.260867 4.03125 95.34375 L 4.03125 93.71875 L 20.40625 93.71875 L 20.25 92.1875 L 4.03125 92.1875 L 4.03125 84.59375 L 26.4375 84.59375 C 26.79021 84.089628 27.131771 83.642696 27.4375 83.125 L 4.03125 83.125 L 4.03125 75.65625 L 48.21875 75.65625 C 48.940409 75.103147 49.647419 74.657526 50.375 74.1875 L 4.03125 74.1875 L 4.03125 67.0625 z M 61.78125 74.09375 C 58.090527 74.18715 53.443125 76.05587 47.8125 79.84375 C 40.3445 84.85675 34.5365 83.3995 31.5625 81.0625 L 36.03125 127.34375 C 39.94825 128.13275 45.48225 125.93225 50.65625 122.53125 C 58.66325 117.28225 65.73125 114.366 71.28125 121 L 70.15625 80.0625 C 69.39888 77.34677 68.12628 75.90676 63.3125 74.15625 C 62.824125 74.09775 62.308496 74.08035 61.78125 74.09375 z M 82.21875 74.25 C 79.652684 74.2169 77.39875 74.8855 75.625 76.375 C 75.635 76.371 75.6775 76.378 75.6875 76.375 C 74.2595 77.745 73.696 79.42625 73.5 80.28125 L 74.09375 120.90625 C 79.73375 113.08925 85.68925 117.05125 94.03125 122.53125 C 99.215251 125.93225 104.7735 128.13175 108.6875 127.34375 L 113.125 81.0625 C 110.16 83.3995 104.354 84.86375 96.875 79.84375 C 91.65125 76.33437 86.495527 74.3052 82.21875 74.25 z M 30.71875 80.28125 C 30.71175 80.31325 30.72175 80.343 30.71875 80.375 L 30.78125 80.34375 C 30.76525 80.32475 30.73175 80.30025 30.71875 80.28125 z M 115.53125 83.9375 C 114.22872 99.25934 111.59823 113.77054 110.3125 128.96875 C 103.01685 131.49566 97.782892 126.8255 93.375 124.8125 C 83.236 119.9335 78.67275 118.463 72.34375 127 L 72.3125 126.96875 C 65.9975 118.47275 61.4385 119.9435 51.3125 124.8125 C 46.896537 126.8866 43.821655 131.27921 33.0625 129.25 C 31.52009 116.63199 30.76876 100.31245 29.28125 84.21875 C 27.89525 87.32275 25.7595 89.49225 23.4375 91.40625 C 24.913 107.21828 26.51813 125.89413 27.3125 137.25 C 37.915117 136.67311 47.476608 137.43964 58.78125 136.25 C 65.98425 134.703 70.20725 131.77825 72.15625 128.03125 C 75.06325 133.62625 84.622004 137.42675 100.125 137.46875 C 99.870475 137.45575 99.62728 137.42525 99.375 137.40625 L 117.21875 138.03125 L 118.375 118.9375 C 118.365 119.34593 118.35555 119.55794 118.34375 120 L 121.125 91.28125 C 118.825 89.35525 116.89125 86.9865 115.53125 83.9375 z M 236.65625 91.8125 C 233.41825 91.8125 229.73 92.783 227 95.375 C 223.81 98.404 222.53125 103.19375 222.53125 107.96875 L 222.53125 109.53125 L 217.53125 109.53125 L 217.53125 116.5 L 222.53125 116.5 L 222.53125 146.40625 L 231.84375 146.40625 L 231.84375 116.5 L 239.84375 116.5 L 239.84375 109.53125 L 231.78125 109.53125 L 231.78125 107.625 C 231.78125 103.11 233.3205 99.21875 237.9375 99.21875 C 239.6685 99.21875 240.9245 99.512 241.9375 99.875 L 242.5625 92.71875 C 241.1055 92.22275 239.13225 91.8125 236.65625 91.8125 z M 312.5 93.21875 C 309.207 93.21875 306.987 95.54425 307 98.53125 C 306.988 101.48025 309.12 103.84375 312.375 103.84375 L 312.46875 103.84375 C 315.85075 103.84375 318.003 101.48025 318 98.53125 C 317.968 95.52125 315.831 93.21875 312.5 93.21875 z M 462.9375 93.21875 C 459.6445 93.21875 457.4245 95.54425 457.4375 98.53125 C 457.4255 101.48025 459.5585 103.84375 462.8125 103.84375 L 462.875 103.84375 C 466.265 103.84375 468.42025 101.48025 468.40625 98.53125 C 468.37525 95.52125 466.2625 93.21875 462.9375 93.21875 z M 257.3125 95.375 L 273.84375 146.40625 L 284.53125 146.40625 L 302.1875 95.375 L 292.25 95.375 L 284.8125 118.71875 C 282.8255 124.91875 280.982 131.13025 279.625 137.15625 L 279.4375 137.15625 C 278.1195 130.98125 276.43675 125.02575 274.46875 118.59375 L 267.5 95.375 L 257.3125 95.375 z M 373 100.0625 L 363.875 102.6875 L 363.875 109.53125 L 358.59375 109.53125 L 358.59375 116.5 L 363.875 116.5 L 363.875 133.84375 C 363.875 138.67375 364.77425 142.0715 366.78125 144.1875 C 368.51225 146.0585 371.3845 147.21875 374.8125 147.21875 C 377.7515 147.21875 380.19175 146.777 381.59375 146.25 L 381.375 139.15625 C 380.32 139.44525 379.47225 139.5625 377.78125 139.5625 C 374.21725 139.5625 373 137.265 373 132.75 L 373 116.5 L 381.875 116.5 L 381.875 109.53125 L 373 109.53125 L 373 100.0625 z M 195.5 108.71875 C 184.39 108.71875 176.40625 116.155 176.40625 128.25 C 176.40625 140.064 184.472 147.25 194.875 147.25 L 194.9375 147.25 C 204.2885 147.25 213.8125 141.173 213.8125 127.625 C 213.8125 116.443 206.469 108.71875 195.5 108.71875 z M 345.34375 108.71875 C 332.38075 108.71875 324.84375 117.30075 324.84375 128.34375 C 324.84375 139.78275 332.28575 147.21875 343.84375 147.21875 C 348.47475 147.21875 352.314 146.2225 354.25 145.3125 L 353 138.375 C 351.177 139.138 348.8835 139.84375 345.6875 139.84375 C 339.3335 139.84375 334.375 135.4985 334.375 127.9375 C 334.343 121.1775 338.55025 115.96875 345.65625 115.96875 C 348.97525 115.96875 351.21975 116.67325 352.71875 117.40625 L 354.34375 110.40625 C 352.21475 109.47725 348.79075 108.71875 345.34375 108.71875 z M 405.21875 108.71875 C 394.10575 108.71875 386.15625 116.155 386.15625 128.25 C 386.15625 140.064 394.18775 147.25 404.59375 147.25 L 404.65625 147.25 C 414.01325 147.25 423.53125 141.173 423.53125 127.625 C 423.53125 116.443 416.19075 108.71875 405.21875 108.71875 z M 449.75 108.71875 C 445.775 108.71875 441.5005 111.34225 439.6875 116.53125 L 439.40625 116.53125 L 439.0625 109.53125 L 431 109.53125 C 431.199 112.81125 431.28125 116.46725 431.28125 121.40625 L 431.21875 146.40625 L 440.5625 146.40625 L 440.5625 127.28125 C 440.5625 126.28125 440.62425 125.28875 440.78125 124.46875 C 441.61425 120.23975 444.687 117.4375 449.125 117.4375 C 450.25 117.4375 451.0695 117.5165 451.9375 117.6875 L 451.9375 108.90625 C 451.1935 108.73625 450.656 108.71875 449.75 108.71875 z M 491 108.71875 C 485.192 108.71875 480.44425 110.28175 477.65625 111.96875 L 479.5 118.03125 C 482.016 116.44525 485.79925 115.28125 489.40625 115.28125 C 495.93425 115.25925 496.90625 119.29675 496.90625 121.71875 L 496.90625 122.3125 C 483.32325 122.2645 475.03125 126.97425 475.03125 136.28125 C 475.03125 141.90225 479.17725 147.25 486.65625 147.25 C 491.43425 147.25 495.262 145.2195 497.5 142.3125 L 497.75 142.3125 L 498.375 146.40625 L 506.78125 146.40625 C 506.37625 144.13325 506.21875 140.88625 506.21875 137.53125 L 506.21875 124.25 C 506.21875 116.159 502.827 108.71875 491 108.71875 z M 307.8125 109.53125 L 307.8125 146.40625 L 317.15625 146.40625 L 317.15625 109.53125 L 307.8125 109.53125 z M 458.25 109.53125 L 458.25 146.40625 L 467.59375 146.40625 L 467.59375 109.53125 L 458.25 109.53125 z M 195.15625 115.46875 C 201.59025 115.46875 204.15625 122.10825 204.15625 127.90625 C 204.15625 135.32825 200.43875 140.46875 195.09375 140.46875 L 195.03125 140.46875 C 189.48425 140.46875 185.9375 135.094 185.9375 128 C 185.9375 121.854 188.60925 115.46875 195.15625 115.46875 z M 404.875 115.46875 C 411.307 115.46875 413.875 122.10825 413.875 127.90625 C 413.875 135.32825 410.1645 140.46875 404.8125 140.46875 L 404.75 140.46875 C 399.199 140.46875 395.65625 135.094 395.65625 128 C 395.65625 121.854 398.329 115.46875 404.875 115.46875 z M 497.125 128.34375 L 497.125 133.4375 C 497.125 134.0835 497.074 134.82875 496.875 135.46875 C 495.98 138.17275 493.31775 140.59375 489.59375 140.59375 C 486.64775 140.59375 484.28125 138.88625 484.28125 135.28125 C 484.28125 129.66725 490.546 128.25375 497.125 128.34375 z M 72.03125 131.5625 C 71.59325 134.5695 69.8065 137.07475 64.8125 138.71875 C 66.0805 140.38775 69.20225 141.28125 72.78125 141.28125 C 76.40825 141.28125 79.182 140.37425 80.25 138.65625 C 74.934 137.00625 72.64525 134.5175 72.03125 131.5625 z M 24.25 147.34375 L 119.3125 147.34375 C 116.9914 150.00094 114.54966 152.4934 112.03125 154.78125 L 31.59375 154.78125 C 29.059969 152.49281 26.585334 150.00176 24.25 147.34375 z M 33.375 156.3125 L 110.25 156.3125 C 107.04364 159.07606 103.76231 161.5775 100.4375 163.71875 L 43.28125 163.71875 C 39.937398 161.57755 36.600025 159.07603 33.375 156.3125 z M 45.8125 165.28125 L 97.90625 165.28125 C 88.52694 170.84978 79.186251 173.84375 71.9375 173.84375 C 64.651874 173.84375 55.245269 170.84966 45.8125 165.28125 z";

  SVGDot.prototype.computeYearBounds = function() {
    var bottom, bounds, compare, left, name, node, right, top, year, _ref;
    compare = function(a, b) {
      var ret;
      a = a || b;
      ret = {
        left: Math.min(a.left, b.left),
        right: Math.max(a.right, b.right),
        top: Math.min(a.top, b.top),
        bottom: Math.max(a.bottom, b.bottom)
      };
      return ret;
    };
    bounds = {};
    _ref = this.graph.nodes;
    for (name in _ref) {
      node = _ref[name];
      year = node.attrs._year;
      if (!year) {
        continue;
      }
      left = node.attrs.pos[0] - node.attrs.width / 2;
      right = left + node.attrs.width;
      top = node.attrs.pos[1] - node.attrs.height / 2;
      bottom = top + node.attrs.height;
      bounds[year] = compare(bounds[year], {
        left: left,
        right: right,
        top: top,
        bottom: bottom
      });
    }
    return bounds;
  };

  SVGDot.prototype.render = function() {
    var cssClass, edge, edgePath, elec, graph, graphGroup, heading, name, node, nodeGroup, nodeRect, _ref, _ref1, _ref2, _ref3, _ref4;
    this.yearBounds = this.computeYearBounds();
    graphGroup = createElmNS('g');
    this.svg.appendChild(graphGroup);
    graphGroup.appendChild(this.createBackground(this.PADDING));
    nodeGroup = createElmNS('g');
    graphGroup.appendChild(nodeGroup);
    nodeGroup.attr({
      transform: "translate(0," + (this.boundingBox.y + this.boundingBox.height) + ")"
    });
    _ref = this.graph.graphs;
    for (name in _ref) {
      graph = _ref[name];
      if (graph.attrs.bb && ('' + graph.id).slice(0, 7) === 'cluster') {
        console.log(graph, this);
        elec = this.createElectivesNode({
          bb: graph.attrs.bb,
          label: graph.attrs.label
        });
        nodeGroup.appendChild(elec);
      }
    }
    _ref1 = this.graph.nodes;
    for (name in _ref1) {
      node = _ref1[name];
      if ((_ref2 = node.attrs.style) != null ? _ref2.match(/invis/) : void 0) {
        continue;
      }
      cssClass = "node year" + node.attrs._year;
      if (node.attrs._elective) {
        cssClass += " elective-node";
      }
      if (node.attrs._inElectivesBlock) {
        cssClass += " in-electives-block";
      }
      nodeRect = this.createNode({
        width: node.attrs.width,
        height: node.attrs.height,
        cssClass: cssClass,
        number: node.attrs._name,
        title: node.attrs._title,
        isElective: node.attrs._elective
      });
      nodeRect.attr({
        transform: "translate(" + node.attrs.pos[0] + "," + node.attrs.pos[1] + ")",
        id: sanitizeId(name)
      });
      nodeGroup.appendChild(nodeRect);
    }
    _ref3 = this.graph.edges;
    for (name in _ref3) {
      edge = _ref3[name];
      edge = edge[0];
      if ((_ref4 = edge.attrs.style) != null ? _ref4.match('invis') : void 0) {
        continue;
      }
      edgePath = this.createEdge({
        edge: edge.attrs.pos,
        cssClass: 'edge',
        arrowhead: edge.attrs.arrowhead
      });
      edgePath.attr({
        origin: sanitizeId(edge.edge[0]),
        target: sanitizeId(edge.edge[1])
      });
      nodeGroup.appendChild(edgePath);
    }
    graphGroup.attr({
      transform: "translate(" + (Math.round(this.PADDING / 2)) + "," + (this.HEADING_HEIGHT + this.PADDING) + ")"
    });
    heading = this.createHeading(this.graph.rootGraph.attrs._title || '', this.PADDING);
    this.svg.appendChild(heading);
    return heading.attr({
      transform: "translate(" + (Math.round(this.PADDING / 2)) + "," + this.HEADING_HEIGHT + ")"
    });
  };

  SVGDot.prototype.createNode = function(attrs) {
    var cssClass, group, height, number, rect, text, title, tspan, width;
    if (attrs == null) {
      attrs = {};
    }
    width = attrs.width, height = attrs.height, cssClass = attrs.cssClass, number = attrs.number, title = attrs.title;
    group = createElmNS('g');
    if (cssClass) {
      group.attr({
        "class": "node " + cssClass
      });
    }
    rect = createElmNS('rect', {
      x: -round(width / 2) + .5,
      y: -round(height / 2) + .5,
      width: ceil(width),
      height: ceil(height),
      rx: 10
    }, group);
    if (attrs.isElective) {
      text = createElmNS('text', {
        x: 0,
        y: 5,
        'text-anchor': 'middle',
        'class': 'course-number'
      }, group);
      text.textContent = title;
      group.attr({
        "class": group.attr('class') + " elective-node"
      });
    } else {
      text = createElmNS('text', {
        x: 0,
        y: 0,
        'text-anchor': 'middle'
      }, group);
      tspan = createElmNS('tspan', {
        x: 0,
        y: -5,
        'class': 'course-number'
      }, text);
      tspan.textContent = number;
      tspan = createElmNS('tspan', {
        x: 0,
        y: 12,
        'class': 'course-title'
      }, text);
      tspan.textContent = title;
    }
    return group;
  };

  SVGDot.prototype.createElectivesNode = function(attrs) {
    var bb, group, label, rect, text, width;
    if (attrs == null) {
      attrs = {};
    }
    bb = attrs.bb, label = attrs.label;
    group = createElmNS('g', {
      'class': 'electives-group'
    });
    width = round(abs(bb[2] - bb[0]));
    rect = createElmNS('rect', {
      x: round(bb[0]),
      y: round(bb[1]),
      width: width,
      height: round(abs(bb[3] - bb[1])),
      rx: 15
    }, group);
    text = createElmNS('text', {
      x: round(bb[0] + width / 2),
      y: round(bb[1] + 14),
      'text-anchor': 'middle'
    }, group);
    text.textContent = label;
    return group;
  };

  SVGDot.prototype.createEdge = function(attrs) {
    var arrowhead, cssClass, edge, group, path, pathStr, spline, _i, _len, _ref;
    if (attrs == null) {
      attrs = {};
    }
    edge = attrs.edge, cssClass = attrs.cssClass, arrowhead = attrs.arrowhead;
    if (edge.type !== 'edge') {
      throw new Error('expecting edge type "edge"');
    }
    group = createElmNS('g', {
      'class': cssClass
    });
    pathStr = "M " + (round(edge.origin[0]) + .5) + " " + (round(edge.origin[1]) + .5);
    _ref = edge.controlPoints;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      spline = _ref[_i];
      pathStr += " C " + spline.join(' ');
    }
    path = createElmNS('path', {
      d: pathStr,
      fill: 'none'
    }, group);
    if (arrowhead !== 'none') {
      arrowhead = this.createArrowhead(edge.arrow);
      group.appendChild(arrowhead);
    }
    return group;
  };

  SVGDot.prototype.createArrowhead = function(coords) {
    var FATNESS, arrowhead, norm, origin, perp, target, v, verts;
    FATNESS = 4;
    origin = coords.slice(0, 2);
    target = coords.slice(2, 4);
    perp = [-(target[1] - origin[1]), target[0] - origin[0]];
    norm = Math.sqrt(perp[0] * perp[0] + perp[1] * perp[1]);
    perp = [perp[0] / norm, perp[1] / norm];
    verts = [origin[0] + perp[0] * FATNESS, origin[1] + perp[1] * FATNESS, target[0], target[1], origin[0] - perp[0] * FATNESS, origin[1] - perp[1] * FATNESS];
    verts = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = verts.length; _i < _len; _i++) {
        v = verts[_i];
        _results.push(round(v, 2));
      }
      return _results;
    })();
    arrowhead = createElmNS('polygon', {
      points: verts.join(' ')
    });
    return arrowhead;
  };

  SVGDot.prototype.createBackground = function(padding) {
    var bottom, dividers, gradient, group, height, left, rect, right, stop, text, top, x, year, _i, _len, _ref, _ref1;
    if (padding == null) {
      padding = 0;
    }
    gradient = createElmNS('linearGradient', {
      id: 'background-gradient'
    }, this.defs);
    stop = createElmNS('stop', {
      'class': 'background-gradient-stop0',
      offset: "0%"
    }, gradient);
    stop = createElmNS('stop', {
      'class': 'background-gradient-stop1',
      offset: "100%"
    }, gradient);
    left = this.boundingBox.x - padding;
    right = this.boundingBox.x + this.boundingBox.width + padding;
    top = this.boundingBox.y - padding;
    bottom = this.boundingBox.height + padding;
    height = bottom - top;
    dividers = {
      '1-2': round((this.yearBounds[1].right + this.yearBounds[2].left) / 2),
      '2-3': round((this.yearBounds[2].right + this.yearBounds[3].left) / 2),
      '3-4': round((this.yearBounds[3].right + this.yearBounds[4].left) / 2)
    };
    group = createElmNS('g');
    rect = createElmNS('rect', {
      y: top,
      height: height
    }, group);
    rect.attr({
      x: left,
      width: dividers['1-2'] - left,
      'class': 'year1 year-odd'
    });
    rect = createElmNS('rect', {
      y: top,
      height: height
    }, group);
    rect.attr({
      x: dividers['1-2'],
      width: dividers['2-3'] - dividers['1-2'],
      'class': 'year2 year-even'
    });
    rect = createElmNS('rect', {
      y: top,
      height: height
    }, group);
    rect.attr({
      x: dividers['2-3'],
      width: dividers['3-4'] - dividers['2-3'],
      'class': 'year3 year-odd'
    });
    rect = createElmNS('rect', {
      y: top,
      height: height
    }, group);
    rect.attr({
      x: dividers['3-4'],
      width: right - dividers['3-4'],
      'class': 'year4 year-even'
    });
    gradient = createElmNS('rect', {
      y: top,
      width: this.GRADIENT_WIDTH,
      height: height,
      fill: 'url(#background-gradient)'
    }, group);
    gradient.attr({
      x: dividers['1-2']
    });
    gradient = createElmNS('rect', {
      y: top,
      width: this.GRADIENT_WIDTH,
      height: height,
      fill: 'url(#background-gradient)'
    }, group);
    gradient.attr({
      x: -dividers['2-3'],
      transform: 'scale(-1,1)'
    });
    gradient = createElmNS('rect', {
      y: top,
      width: this.GRADIENT_WIDTH,
      height: height,
      fill: 'url(#background-gradient)'
    }, group);
    gradient.attr({
      x: dividers['3-4']
    });
    _ref = [[0, 1], [dividers['1-2'], 2], [dividers['2-3'], 3], [dividers['3-4'], 4]];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], x = _ref1[0], year = _ref1[1];
      text = createElmNS('text', {
        x: x + 10,
        y: -5,
        'text-anchor': 'left',
        'class': 'year-label'
      }, group);
      text.textContent = "Year " + year;
    }
    return group;
  };

  SVGDot.prototype.createHeading = function(title, padding) {
    var BLUR_RADIUS, blur, filter, gradient, group, logo, logoGroup, rect, stop, text, width;
    if (title == null) {
      title = '';
    }
    if (padding == null) {
      padding = 0;
    }
    BLUR_RADIUS = 3.2;
    gradient = createElmNS('linearGradient', {
      id: 'background-gradient-vert',
      x1: 0,
      x2: 0,
      y1: '0%',
      y2: '100%'
    }, this.defs);
    stop = createElmNS('stop', {
      'class': 'background-gradient-stop0',
      offset: "0%"
    }, gradient);
    stop = createElmNS('stop', {
      'class': 'background-gradient-stop1',
      offset: "100%"
    }, gradient);
    filter = createElmNS('filter', {
      id: 'blur-filter',
      'color-interpolation-filters': 'sRGB'
    }, this.defs);
    blur = createElmNS('feGaussianBlur', {
      stdDeviation: BLUR_RADIUS
    }, filter);
    width = this.boundingBox.width + 2 * padding;
    group = createElmNS('g', {
      'class': 'heading'
    });
    rect = createElmNS('rect', {
      x: -padding,
      y: -this.HEADING_HEIGHT
    }, group);
    rect.attr({
      width: width,
      height: this.HEADING_HEIGHT
    });
    rect = createElmNS('rect', {
      x: -padding,
      y: 0
    }, group);
    rect.attr({
      width: width,
      height: this.GRADIENT_WIDTH,
      fill: 'url(#background-gradient-vert)'
    });
    text = createElmNS('text', {
      x: width / 2,
      y: -12
    }, group);
    text.attr({
      'text-anchor': 'middle',
      'class': 'title-blur',
      filter: 'url(#blur-filter)'
    });
    text.textContent = title;
    text = createElmNS('text', {
      x: width / 2,
      y: -12
    }, group);
    text.attr({
      'text-anchor': 'middle',
      'class': 'foreground-text'
    });
    text.textContent = title;
    logoGroup = createElmNS('g', {}, group);
    logoGroup.attr({
      transform: 'translate(0,-37)'
    });
    logo = createElmNS('path', {
      d: this.UVIC_LOGO_PATH
    }, logoGroup);
    logo.attr({
      'class': 'title-blur',
      transform: 'scale(.19,.19)',
      filter: 'url(#blur-filter)'
    });
    logo = createElmNS('path', {
      d: this.UVIC_LOGO_PATH
    }, logoGroup);
    logo.attr({
      'class': 'foreground-text',
      transform: 'scale(.19,.19)'
    });
    return group;
  };

  SVGDot.prototype.inlineDocumentStyles = function(svg) {
    var camelCase, elm, newStyle, oldStyle, rule, ruleName, selector, sheet, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    if (svg == null) {
      svg = this.svg;
    }
    camelCase = function(word) {
      return word.replace(/-(.)/g, (function(_, w) {
        return w.toUpperCase();
      }));
    };
    _ref = document.styleSheets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sheet = _ref[_i];
      _ref1 = sheet.rules || sheet.cssRules;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        rule = _ref1[_j];
        if (!(rule instanceof CSSStyleRule)) {
          continue;
        }
        selector = rule.selectorText;
        if (selector.slice(0, 3) !== 'svg') {
          continue;
        }
        newStyle = '';
        _ref2 = rule.style;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          ruleName = _ref2[_k];
          if (!rule.style[camelCase(ruleName)] || ruleName.charAt(0) === '-') {
            continue;
          }
          newStyle += "; " + ruleName + ": " + rule.style[camelCase(ruleName)];
        }
        _ref3 = svg.querySelectorAll(selector);
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          elm = _ref3[_l];
          oldStyle = elm.getAttribute('style') || '';
          newStyle = oldStyle + newStyle;
          if (newStyle.charAt(0) === ';') {
            newStyle = newStyle.slice(1);
          }
          elm.setAttribute('style', newStyle);
        }
      }
    }
    return svg;
  };

  SVGDot.prototype.addCDATA = function(ops) {
    var container, data, elmName, svg;
    if (ops == null) {
      ops = {
        svg: this.svg,
        elmName: 'data',
        data: ''
      };
    }
    svg = ops.svg, elmName = ops.elmName, data = ops.data;
    container = createElmNS(elmName, {}, svg);
    container.textContent = data;
  };

  return SVGDot;

})();

/*
# Helpers to inline styles for DOM elements
# from: http://stackoverflow.com/questions/754607/can-jquery-get-all-css-styles-associated-with-an-element
*/


css = function(a) {
  var i, o, r, rules, sheets;
  sheets = document.styleSheets;
  o = {};
  for (i in sheets) {
    rules = sheets[i].rules || sheets[i].cssRules;
    for (r in rules) {
      if (a.is(rules[r].selectorText)) {
        o = $.extend(o, css2json(rules[r].style), css2json(a.attr("style")));
      }
    }
  }
  return o;
};

css2json = function(css) {
  var i, l, s;
  s = {};
  if (!css) {
    return s;
  }
  if (css instanceof CSSStyleDeclaration) {
    for (i in css) {
      if (css[i].toLowerCase) {
        s[css[i].toLowerCase()] = css[css[i]];
      }
    }
  } else if (typeof css === "string") {
    css = css.split("; ");
    for (i in css) {
      l = css[i].split(": ");
      s[l[0].toLowerCase()] = l[1];
    }
  }
  return s;
};

renderCurrent = function() {
  var svgGraph;
  window.ast = DotParser.parse(document.querySelector('textarea').value);
  console.log(ast);
  window.graph = new DotGraph(ast);
  console.log(graph);
  graph.walk();
  svgGraph = new SVGDot(ast);
  svgGraph.render();
  return document.body.appendChild(svgGraph.svg);
};

renderToSvg = function(graph) {
  var createElm, createElmNS, dragging, floatList, g, getCoords, i, k, label, n, offsetx, offsety, oldx, oldy, parser, path, points, pos, rect, rx, ry, text, tspan, x, xml, _ref, _ref1;
  floatList = function(l) {
    var v, _i, _len, _ref, _results;
    _ref = l.split(',');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(parseFloat(v));
    }
    return _results;
  };
  createElm = function(name, attrs, parent) {
    var elm, k, v;
    if (attrs == null) {
      attrs = {};
    }
    elm = document.createElement(name);
    for (k in attrs) {
      v = attrs[k];
      elm.setAttribute(k, v);
    }
    if (parent != null) {
      parent.appendChild(elm);
    }
    return elm;
  };
  createElmNS = function(name, attrs, parent) {
    var elm, k, v;
    if (attrs == null) {
      attrs = {};
    }
    elm = document.createElementNS("http://www.w3.org/2000/svg", name);
    for (k in attrs) {
      v = attrs[k];
      elm.setAttribute(k, v);
    }
    if (parent != null) {
      parent.appendChild(elm);
    }
    return elm;
  };
  window.div = createElm('div', {}, document.body);
  window.svg = createElmNS('svg', {
    width: 700,
    height: 500
  }, div);
  window.bb = createElmNS('g', {
    transform: "translate(0,0)"
  }, svg);
  parser = new DOMParser();
  _ref = graph.nodes;
  for (k in _ref) {
    n = _ref[k];
    if (n.attrs.pos) {
      pos = floatList(n.attrs.pos);
      label = n.attrs.label;
      try {
        label = label.replace("\\N", k);
      } catch (e) {
        '';

      }
      if (label.value) {
        try {
          xml = parser.parseFromString("<root>" + label.value + "</root>", "text/xml");
          label = ((function() {
            var _i, _len, _ref1, _results;
            _ref1 = xml.querySelectorAll('font');
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              x = _ref1[_i];
              _results.push(x.textContent);
            }
            return _results;
          })()).join('\n');
        } catch (e) {
          console.log(label.value);
          label = '' + label.value;
        }
      }
      rx = parseFloat(n.attrs.width) * 36;
      ry = parseFloat(n.attrs.height) * 36;
      rect = createElmNS('rect', {
        id: k,
        x: pos[0] - rx,
        y: pos[1] - ry,
        width: rx * 2,
        height: ry * 2,
        "class": 'border',
        fill: 'none',
        rx: 10
      }, bb);
      g = createElmNS('g', {
        transform: "translate(" + pos[0] + "," + pos[1] + ")"
      }, bb);
      text = createElmNS('text', {
        x: 0,
        y: 0,
        'text-anchor': 'middle',
        'font-family': 'sans',
        'font-size': 12,
        fill: 'red'
      }, g);
      tspan = createElmNS('tspan', {
        x: 0,
        y: -5
      }, text);
      tspan.textContent = label.split('\n')[0];
      tspan = createElmNS('tspan', {
        x: 0,
        y: 12,
        "class": 'title'
      }, text);
      tspan.textContent = '' + ('' + label).split('\n')[1];
    }
  }
  _ref1 = graph.edges;
  for (k in _ref1) {
    e = _ref1[k];
    e = e[0];
    if (e.attrs.pos) {
      points = e.attrs.pos.slice(2).split(' ').map(floatList);
      path = "M " + points[1][0] + " " + points[1][1];
      i = 2;
      while (i < points.length) {
        path += " C " + [points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], points[i + 2][0], points[i + 2][1]].join(' ');
        i += 3;
      }
      createElmNS('path', {
        d: path,
        stroke: 'blue',
        fill: 'none'
      }, bb);
    }
  }
  dragging = false;
  oldx = oldy = 0;
  offsetx = offsety = 0;
  getCoords = function(evt) {
    rect = svg.getBoundingClientRect();
    return [evt.pageX - div.offsetLeft, evt.pageY - div.offsetTop];
    return [evt.clientX - rect.left, evt.clientY - rect.top];
  };
  svg.onmousedown = function(evt) {
    var y, _ref2;
    _ref2 = getCoords(evt), x = _ref2[0], y = _ref2[1];
    oldx = x;
    oldy = y;
    return dragging = true;
  };
  svg.onmouseup = function(evt) {
    return dragging = false;
  };
  return svg.onmousemove = function(evt) {
    var diffx, diffy, y, _ref2;
    if (dragging) {
      _ref2 = getCoords(evt), x = _ref2[0], y = _ref2[1];
      diffx = x - oldx;
      diffy = y - oldy;
      offsetx += diffx;
      offsety += diffy;
      bb.setAttribute('transform', "translate(" + offsetx + "," + offsety + ")");
      oldx = x;
      return oldy = y;
    }
  };
};

renderDotGraph = function(canvasElm, graph) {
  var bb, ctx, floatList, g, i, k, label, n, points, pos, rx, ry, _ref, _ref1, _ref2, _results;
  floatList = function(l) {
    var v, _i, _len, _ref, _results;
    _ref = l.split(',');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(parseFloat(v));
    }
    return _results;
  };
  ctx = canvasElm.getContext("2d");
  ctx.fillStyle = 'white';
  ctx.rect(0, 0, 10000, 10000);
  ctx.fill();
  ctx.fillStyle = 'black';
  ctx.strokeStyle = 'red';
  _ref = graph.graphs;
  for (k in _ref) {
    g = _ref[k];
    if (g.attrs.bb) {
      bb = floatList(g.attrs.bb);
      ctx.beginPath();
      ctx.rect(bb[0], bb[1], bb[2] - bb[0], bb[3] - bb[1]);
      ctx.stroke();
    }
  }
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  _ref1 = graph.nodes;
  for (k in _ref1) {
    n = _ref1[k];
    if (n.attrs.pos) {
      pos = floatList(n.attrs.pos);
      label = n.attrs.label;
      try {
        label = label.replace("\\N", k);
      } catch (e) {
        console.log(label);
      }
      ctx.fillText(label, pos[0], pos[1]);
      rx = parseFloat(n.attrs.width) * 36;
      ry = parseFloat(n.attrs.height) * 36;
      ctx.beginPath();
      ctx.ellipse(pos[0] - rx, pos[1] - ry, rx * 2, ry * 2);
      ctx.stroke();
    }
  }
  ctx.strokeStyle = 'blue';
  _ref2 = graph.edges;
  _results = [];
  for (k in _ref2) {
    e = _ref2[k];
    e = e[0];
    if (e.attrs.pos) {
      points = e.attrs.pos.slice(2).split(' ').map(floatList);
      ctx.beginPath();
      ctx.moveTo(points[1][0], points[1][1]);
      i = 2;
      while (i < points.length) {
        ctx.bezierCurveTo(points[i][0], points[i][1], points[i + 1][0], points[i + 1][1], points[i + 2][0], points[i + 2][1]);
        i += 3;
      }
      ctx.stroke();
      ctx.beginPath();
      canvas_arrow(ctx, points[points.length - 1][0], points[points.length - 1][1], points[0][0], points[0][1]);
      _results.push(ctx.stroke());
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};
