// Generated by CoffeeScript 1.4.0
var BasicCourse, CourseButton, CourseManager, CourseStateButton, CourseUtils, DiGraph, Electives, ElectivesButton, ElectivesButtonEditor, PrereqUtils, attachedToDom, objToString, objValsToArray, titleCaps,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

objToString = function(obj) {
  var p, ret, v;
  ret = '{ ';
  for (p in obj) {
    v = obj[p];
    ret += " " + p + ":" + v + ", ";
  }
  return ret + "}";
};

attachedToDom = function(elm) {
  if (!elm || !(elm.parentNode != null)) {
    return false;
  } else if (elm.parentNode === document) {
    return true;
  }
  return attachedToDom(elm.parentNode);
};

objValsToArray = function(obj) {
  var k, v;
  return (function() {
    var _results;
    _results = [];
    for (k in obj) {
      v = obj[k];
      _results.push(v);
    }
    return _results;
  })();
};

/*
# * Title Caps
# *
# * Ported to JavaScript By John Resig - http://ejohn.org/ - 21 May 2008
# * Original by John Gruber - http://daringfireball.net/ - 10 May 2008
# * License: http://www.opensource.org/licenses/mit-license.php
*/


titleCaps = (function() {
  var lower, punct, small, upper;
  lower = function(word) {
    return word.toLowerCase();
  };
  upper = function(word) {
    return word.substr(0, 1).toUpperCase() + word.substr(1);
  };
  small = "(a|an|and|as|at|but|by|en|for|if|in|of|on|or|the|to|v[.]?|via|vs[.]?|with|amp)";
  punct = "([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]*)";
  titleCaps = function(title) {
    var index, m, parts, split;
    parts = [];
    split = /[:.;?!] |(?: |^)["�]/g;
    index = 0;
    while (true) {
      m = split.exec(title);
      parts.push(title.substring(index, (m ? m.index : title.length)).replace(/\b([A-Za-z][a-z.'�]*)\b/g, function(all) {
        if (/[A-Za-z]\.[A-Za-z]/.test(all)) {
          return all;
        } else {
          return upper(all);
        }
      }).replace(/\b(i|v|x|l|c|d|m)+\b/i, function(all) {
        return all.toUpperCase();
      }).replace(RegExp("\\b" + small + "\\b", "ig"), lower).replace(RegExp("^" + punct + small + "\\b", "ig"), function(all, punct, word) {
        return punct + upper(word);
      }).replace(RegExp("\\b" + small + punct + "$", "ig"), upper));
      index = split.lastIndex;
      if (m) {
        parts.push(m[0]);
      } else {
        break;
      }
    }
    return parts.join("").replace(RegExp(" V(s?)\\. ", "g"), " v$1. ").replace(/(['�])S\b/g, "$1s").replace(/\b(AT&T|Q&A)\b/g, function(all) {
      return all.toUpperCase();
    });
  };
  return titleCaps;
})();

$(document).ready(function() {
  window.courseManager = new CourseManager;
  window.courses = window.courseManager.courses;
  $('.course-status').buttonset().disableSelection();
  $('button').button();
  $('#department-list').combobox();
  window.courseManager.showCoursesOfSubject('MATH');
  $('#show-courses').click(function() {
    var c, courses, number, subject, subjects, v, val, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
    subjects = [];
    courses = [];
    try {
      val = $('#department-list').combobox('value').toUpperCase();
      _ref = val.split(/,\s*/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        if (v.match(/\d/)) {
          subject = (_ref1 = v.match(/[a-zA-Z]+/)) != null ? _ref1[0] : void 0;
          number = (_ref2 = v.match(/\d\w+/)) != null ? _ref2[0] : void 0;
          courses.push({
            subject: subject,
            number: number
          });
        } else {
          subjects.push(v);
        }
      }
    } catch (e) {
      subjects.push($('#department-list option:selected()').val());
    }
    console.log(subjects, courses);
    for (_j = 0, _len1 = subjects.length; _j < _len1; _j++) {
      v = subjects[_j];
      window.courseManager.showCoursesOfSubject(v);
    }
    _results = [];
    for (_k = 0, _len2 = courses.length; _k < _len2; _k++) {
      c = courses[_k];
      _results.push((function(c) {
        return window.courseManager.loadSubjectData(c.subject, function() {
          return window.courseManager.ensureDisplayedInYearChart(c);
        });
      })(c));
    }
    return _results;
  });
  $('#hide-courses').click(function() {
    var subjects, v, val, _i, _j, _len, _len1, _ref, _results;
    subjects = [];
    try {
      val = $('#department-list').combobox('value');
      _ref = val.split(/,\s*/);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        subjects.push(v.toUpperCase());
      }
    } catch (e) {
      subjects.push($('#department-list option:selected()').val());
    }
    _results = [];
    for (_j = 0, _len1 = subjects.length; _j < _len1; _j++) {
      v = subjects[_j];
      _results.push(window.courseManager.hideCoursesOfSubject(v));
    }
    return _results;
  });
  $('.year').droppable({
    hoverClass: 'highlight',
    drop: function(event, ui) {
      var courses;
      courses = this.getElementsByClassName('courses')[0];
      courses.appendChild(ui.draggable[0]);
      return window.courseManager.selectCourse(ui.draggable[0].course);
    }
  });
  return $('#create-new-electives').click(function() {
    var elective, electiveButton;
    elective = new ElectivesButtonEditor({
      title: 'Electives'
    }, window.courseManager);
    electiveButton = new ElectivesButton(elective);
    $('#electives-list').append(elective.getButton());
    $('.year1 .courses').append(electiveButton.getButton());
    window.courseManager.addCourse(electiveButton);
    window.courseManager.sortableCourses[electiveButton] = electiveButton;
    window.courseManager.addCourse(elective);
    window.courseManager.makeCourseButtonDraggable(electiveButton);
    return window.courseManager.makeElectivesButtonDroppable(electiveButton);
  });
});

/*
# Class to manage and keep the sync of all course on the webpage
# and their state.
*/


CourseManager = (function() {

  function CourseManager() {
    this.courseDataLoaded = __bind(this.courseDataLoaded, this);
    this.courses = {};
    this.courseData = {};
    this.sortableCourses = {};
    this.sortableCoursesStateButtons = {};
    this.loadedSubjects = {};
  }

  CourseManager.prototype.updateCourseState = function(course, state) {
    var c, _i, _len, _ref, _results;
    _ref = this.courses[course] || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      _results.push(c.setState(state));
    }
    return _results;
  };

  CourseManager.prototype.addCourse = function(course) {
    var hash;
    hash = '' + course;
    if (!this.courses[hash]) {
      this.courses[hash] = [];
    }
    this.courses[hash].push(course);
    return course;
  };

  CourseManager.prototype.removeCourse = function(course) {
    var hash, index;
    hash = '' + course;
    if (!this.courses[hash]) {
      return false;
    }
    index = this.courses[hash].indexOf(course);
    if (index >= 0) {
      return this.courses[hash].splice(index, 1);
    }
  };

  CourseManager.prototype.removeAllCourseInstances = function(course) {
    return delete this.courses[course];
  };

  CourseManager.prototype.cleanupUnattachedButtons = function(course, buttonType) {
    var clean,
      _this = this;
    if (buttonType == null) {
      buttonType = CourseButton;
    }
    clean = function() {
      var c, courses, hash, k, v, _i, _len, _ref;
      if (_this.needsCleaning = false) {
        return;
      }
      _this.needsCleaning = false;
      courses = [];
      if (!course) {
        _ref = _this.courses;
        for (k in _ref) {
          v = _ref[k];
          courses = courses.concat(v);
        }
      } else {
        hash = BasicCourse.hashCourse(course);
        courses = _this.courses[hash] || [];
      }
      for (_i = 0, _len = courses.length; _i < _len; _i++) {
        c = courses[_i];
        if (c instanceof buttonType && !attachedToDom(c.elm)) {
          c.removeButton();
          _this.removeCourse(c);
        }
      }
    };
    this.needsCleaning = true;
    return window.setTimeout(clean, 1000);
  };

  CourseManager.prototype.updateElectivesButton = function(button) {
    var data, electiveButton, _i, _len, _ref, _results;
    data = button.getValues();
    _ref = this.courses[button] || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      electiveButton = _ref[_i];
      console.log(electiveButton);
      if (electiveButton instanceof ElectivesButton) {
        window.xxx = electiveButton;
      }
      _results.push(electiveButton.update(data));
    }
    return _results;
  };

  CourseManager.prototype.selectCourse = function(course) {
    var c, hash, selectedCourse, stateButtons, _ref,
      _this = this;
    if (!course) {
      return;
    }
    selectedCourse = null;
    _ref = this.sortableCourses;
    for (hash in _ref) {
      c = _ref[hash];
      if (c.state.selected) {
        c.setState({
          selected: false
        });
      }
      if (c.subject === (course != null ? course.subject : void 0) && c.number === (course != null ? course.number : void 0)) {
        c.setState({
          selected: true
        });
        selectedCourse = c;
      }
    }
    if (!selectedCourse) {
      return;
    }
    stateButtons = this.sortableCoursesStateButtons[selectedCourse];
    if (!stateButtons) {
      stateButtons = this.createCourseStateButton(selectedCourse);
    }
    $('.course-info .course-name').html("" + selectedCourse.hash + " &mdash; " + (titleCaps(('' + selectedCourse.data.title).toLowerCase())));
    $('.course-info .course-state').children().detach();
    $('.course-info .course-state').html(stateButtons.elm);
    $('.course-info .prereq-area').html(PrereqUtils.prereqsToDivs(stateButtons.prereqs, this));
    window.setTimeout((function() {
      return $('#dot').val(_this.createDotGraph());
    }), 0);
    return this.cleanupUnattachedButtons();
  };

  CourseManager.prototype.createCourseButton = function(course, ops) {
    var updateCourse,
      _this = this;
    if (ops == null) {
      ops = {};
    }
    if (this.courseData[course]) {
      course = new CourseButton(this.courseData[course], true);
    } else {
      course = new CourseButton(course);
      updateCourse = function() {
        if (!_this.courseData[course]) {
          if (course.elm) {
            course.$elm.addClass('defunct');
          }
          return;
        }
        course.update(_this.courseData[course]);
        return course.wasSynced = true;
      };
      this.loadSubjectData(course.subject, updateCourse);
    }
    if (ops.clickable) {
      this.makeCourseButtonClickable(course, ops);
    }
    if (ops.draggable) {
      this.makeCourseButtonDraggable(course, ops);
    }
    this.addCourse(course);
    this.initButtonState(course);
    return course;
  };

  CourseManager.prototype.makeCourseButtonClickable = function(button, ops) {
    var _this = this;
    if (ops == null) {
      ops = {};
    }
    if (ops.selectable) {
      button.$elm.attr({
        tabindex: 1
      });
      button.$elm.focus(function() {
        if (!this.course.state.selected) {
          return this.course.$elm.trigger('click');
        }
      });
      button.$elm.keydown(function(event) {
        var i, myIndex, node, self, siblings, sibs, _i, _len;
        self = event.currentTarget;
        siblings = event.currentTarget.parentNode.childNodes;
        myIndex = null;
        for (i = _i = 0, _len = siblings.length; _i < _len; i = ++_i) {
          node = siblings[i];
          if (node === self) {
            myIndex = i;
          }
        }
        sibs = {};
        if (myIndex + 1 < siblings.length) {
          sibs.right = siblings[myIndex + 1];
        }
        if (myIndex - 1 >= 0) {
          sibs.left = siblings[myIndex - 1];
        }
        switch (event.keyCode) {
          case 37:
            if (sibs.left) {
              return $(sibs.left).focus();
            }
            break;
          case 38:
            return '';
          case 39:
            if (sibs.right) {
              return $(sibs.right).focus();
            }
            break;
          case 40:
            return '';
          case 32:
          case 13:
            return $(self).click();
        }
      });
    }
    return $(button.getButton()).click(function(evt) {
      var newState;
      if ($(evt.currentTarget).hasClass('defunct')) {
        return;
      }
      if (ops.selectable && !button.state.selected) {
        _this.selectCourse(button);
        $(evt.currentTarget).focus();
        return;
      }
      if ($(evt.currentTarget).hasClass('noclick')) {
        $(evt.currentTarget).removeClass('noclick');
        return;
      }
      newState = CourseManager.toggleState(button.state);
      if (ops.insertOnClick) {
        _this.ensureDisplayedInYearChart(button);
      }
      return _this.updateCourseState(button, newState);
    });
  };

  CourseManager.prototype.makeCourseButtonDraggable = function(button, ops) {
    if (ops == null) {
      ops = {};
    }
    return $(button.getButton()).draggable({
      appendTo: 'body',
      helper: 'clone',
      revert: 'invalid',
      distance: '25',
      opacity: 0.7
    });
  };

  CourseManager.prototype.makeElectivesButtonDroppable = function(button, ops) {
    if (ops == null) {
      ops = {
        clone: false
      };
    }
    button.getButton();
    return button.$coursesDiv.droppable({
      greedy: true,
      hoverClass: 'highlight',
      drop: function(event, ui) {
        button.$coursesDiv.append(ui.draggable[0]);
        button.update();
        return window.courseManager.selectCourse(ui.draggable[0].course);
      }
    });
  };

  CourseManager.prototype.createCourseStateButton = function(course) {
    var updateCourse,
      _this = this;
    if (this.courseData[course]) {
      course = new CourseStateButton(this.courseData[course], true);
    } else {
      course = new CourseStateButton(course);
      updateCourse = function() {
        if (!_this.courseData[course]) {
          throw new Error("Course " + course + " was loaded in dep. " + course.subject + ", but wasn't available");
        }
        course.update(_this.courseData[course]);
        return course.wasSynced = true;
      };
      this.loadSubjectData(course.subject, updateCourse);
    }
    this.sortableCoursesStateButtons[course] = course;
    this.makeCourseStateButtonClickable(course);
    this.addCourse(course);
    this.initButtonState(course);
    return course;
  };

  CourseManager.prototype.makeCourseStateButtonClickable = function(button) {
    var _this = this;
    return button.$elm.find('input').bind('change', function(evt) {
      var state, val;
      val = $(evt.currentTarget).parent().find('input:checked').val();
      if (!(val != null) || val === 'none') {
        state = {
          required: false,
          elective: false
        };
      }
      if (val === 'required') {
        state = {
          required: true,
          elective: false
        };
      }
      if (val === 'elective') {
        state = {
          required: false,
          elective: true
        };
      }
      return _this.updateCourseState(button, state);
    });
  };

  CourseManager.toggleState = function(state) {
    var ret;
    ret = {
      required: false,
      elective: false
    };
    if (state.required) {
      ret.elective = true;
    }
    if (state.elective) {
      ret.elective = false;
    }
    if (!(state.required || state.elective)) {
      ret.required = true;
    }
    return ret;
  };

  CourseManager.prototype.initButtonState = function(button) {
    var c, state;
    if (!this.courses[button] || this.courses[button].length === 0) {
      return;
    }
    c = this.courses[button][0];
    state = {
      required: c.state.required,
      elective: c.state.elective
    };
    return button.setState(state, {
      forceUpdate: true
    });
  };

  CourseManager.prototype.getSelectedCourses = function() {
    var hash, list, ret, _ref, _ref1, _ref2;
    ret = [];
    _ref = this.courses;
    for (hash in _ref) {
      list = _ref[hash];
      if (((_ref1 = list[0]) != null ? _ref1.state.required : void 0) || ((_ref2 = list[0]) != null ? _ref2.state.elective : void 0)) {
        ret.push(list[0]);
      }
    }
    return ret;
  };

  CourseManager.prototype.loadSubjectData = function(subject, callback, force) {
    if (force == null) {
      force = false;
    }
    if (this.loadedSubjects[subject] && !force) {
      callback();
    }
    return $.ajax({
      url: "course_data/" + subject + ".json",
      dataType: 'json',
      success: this.courseDataLoaded,
      error: function(e) {
        console.log('ajax error');
        throw e;
      },
      complete: callback
    });
  };

  CourseManager.prototype.courseDataLoaded = function(data, textState, jsXHR) {
    var c, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      c = data[_i];
      this.courseData[BasicCourse.hashCourse(c)] = c;
      _results.push(this.loadedSubjects[c.subject] = true);
    }
    return _results;
  };

  CourseManager.prototype.showCoursesOfSubject = function(subject) {
    var showCourses,
      _this = this;
    showCourses = function() {
      var course, hash, _ref, _results;
      _ref = _this.sortableCourses;
      _results = [];
      for (hash in _ref) {
        course = _ref[hash];
        if (course.subject === subject) {
          _results.push(course.$elm.show());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    if (this.loadedSubjects[subject]) {
      this.populateYearChartWithSubject(subject);
      showCourses();
    } else {
      this.loadSubjectData(subject, function() {
        return _this.showCoursesOfSubject(subject);
      });
    }
  };

  CourseManager.prototype.hideCoursesOfSubject = function(subject) {
    var course, hash, _ref;
    _ref = this.sortableCourses;
    for (hash in _ref) {
      course = _ref[hash];
      if (course.subject === subject && course.state.required === false && course.state.elective === false) {
        if (course.elm) {
          course.$elm.hide();
        }
      }
    }
  };

  CourseManager.prototype.populateYearChartWithSubject = function(subject) {
    var container, course, data, hash, leadingNumber, list, year, years, _i, _j, _len, _len1, _ref, _ref1;
    years = {};
    _ref = this.courseData;
    for (hash in _ref) {
      data = _ref[hash];
      if (data.subject === subject && !this.sortableCourses[hash]) {
        leadingNumber = data.number.charAt(0);
        years[leadingNumber] = years[leadingNumber] || [];
        years[leadingNumber].push(data);
      }
    }
    _ref1 = ['1', '2', '3', '4'];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      year = _ref1[_i];
      list = years[year] || [];
      list.sort();
      container = $(".year" + year + " .courses");
      for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
        data = list[_j];
        course = this.createCourseButton(data, {
          clickable: true,
          selectable: true,
          draggable: true
        });
        this.sortableCourses[course] = course;
        container.append(course.getButton());
      }
    }
  };

  CourseManager.prototype.ensureDisplayedInYearChart = function(course) {
    var hash, leadingNumber,
      _this = this;
    hash = BasicCourse.hashCourse(course);
    if (!this.courseData[hash] && this.loadedSubjects[course.subject]) {
      throw new Error("" + hash + " cannot be loaded.  Does not appear to exist...");
    }
    if (!this.courseData[hash]) {
      this.loadSubjectData(course.subject, function() {
        return _this.ensureDisplayedInYearChart(course);
      });
    }
    if (this.sortableCourses[hash]) {
      this.sortableCourses[hash].$elm.show();
      return;
    }
    leadingNumber = this.courseData[hash].number.charAt(0);
    if (leadingNumber === '1' || leadingNumber === '2' || leadingNumber === '3' || leadingNumber === '4') {
      course = this.createCourseButton(this.courseData[hash], {
        clickable: true,
        selectable: true,
        draggable: true
      });
      this.sortableCourses[course] = course;
      return $(".year" + leadingNumber + " .courses").append(course.getButton());
    }
  };

  CourseManager.prototype.createDotGraph = function() {
    var allCourses, allCoursesHash, c, clusters, course, courseHashLookup, e, edges, elms, filterDisplayable, g, hash, i, number, p, prereqs, subject, t, titles, years, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref;
    filterDisplayable = function(list) {
      var c, _ref, _ref1;
      if (!list) {
        return list;
      }
      if (!(list.length != null)) {
        return ((_ref = list.state) != null ? _ref.required : void 0) || ((_ref1 = list.state) != null ? _ref1.elective : void 0);
      }
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          c = list[_i];
          if (filterDisplayable(c)) {
            _results.push(c);
          }
        }
        return _results;
      })();
    };
    clusters = [];
    years = {
      1: [],
      2: [],
      3: [],
      4: []
    };
    _ref = [1, 2, 3, 4];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      elms = $(".year" + i + " .courses").children();
      for (_j = 0, _len1 = elms.length; _j < _len1; _j++) {
        e = elms[_j];
        subject = e.getAttribute('subject');
        number = e.getAttribute('number');
        hash = BasicCourse.hashCourse({
          subject: subject,
          number: number
        });
        if (this.sortableCourses[hash] instanceof Electives) {
          years[i] = years[i].concat(filterDisplayable(objValsToArray(this.sortableCourses[hash].courses)));
          clusters.push({
            info: this.sortableCourses[hash],
            nodes: filterDisplayable(objValsToArray(this.sortableCourses[hash].courses))
          });
        }
        if (filterDisplayable(this.sortableCourses[hash])) {
          years[i].push(this.sortableCourses[hash]);
        }
      }
    }
    allCourses = years[1].concat(years[2]).concat(years[3]).concat(years[4]);
    allCoursesHash = (function() {
      var _k, _len2, _results;
      _results = [];
      for (_k = 0, _len2 = allCourses.length; _k < _len2; _k++) {
        c = allCourses[_k];
        _results.push(c.hash);
      }
      return _results;
    })();
    courseHashLookup = {};
    for (_k = 0, _len2 = allCoursesHash.length; _k < _len2; _k++) {
      hash = allCoursesHash[_k];
      courseHashLookup[hash] = true;
    }
    edges = [];
    for (_l = 0, _len3 = allCourses.length; _l < _len3; _l++) {
      course = allCourses[_l];
      if (course.prereqs != null) {
        prereqs = (function() {
          var _len4, _m, _ref1, _results;
          _ref1 = PrereqUtils.flattenPrereqs(course.prereqs);
          _results = [];
          for (_m = 0, _len4 = _ref1.length; _m < _len4; _m++) {
            c = _ref1[_m];
            _results.push(BasicCourse.hashCourse(c));
          }
          return _results;
        })();
        for (_m = 0, _len4 = prereqs.length; _m < _len4; _m++) {
          p = prereqs[_m];
          if (courseHashLookup[p]) {
            edges.push([p, course.hash]);
          }
        }
      }
    }
    g = new DiGraph(edges, allCourses);
    g.years = years;
    titles = {};
    for (t in g.nodes) {
      titles[t] = titleCaps(('' + this.sortableCourses[t].data.title).toLowerCase());
    }
    $('#dot2').val(g.toDot('unpruned', titles, clusters));
    console.log(g.eliminateRedundantEdges());
    console.log(clusters);
    return g.toDot('pruned', titles, clusters);
  };

  return CourseManager;

})();

/*
# Utility functions for dealing with lists of courses and their prereqs
*/


CourseUtils = {
  updatePrereqTags: function() {
    var c, hash, k, prereqs, selected, unmet, _i, _len, _ref, _ref1;
    selected = CourseUtils.getSelectedCourses();
    prereqs = CourseUtils.computePrereqTree(selected, selected);
    unmet = {};
    _ref = Course.flattenPrereqs(prereqs);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      unmet[Course.hashCourse(c)] = true;
    }
    _ref1 = window.courses;
    for (hash in _ref1) {
      c = _ref1[hash];
      c.setState({
        prereq: !!unmet[hash]
      });
    }
    console.log(((function() {
      var _results;
      _results = [];
      for (k in unmet) {
        _results.push(k);
      }
      return _results;
    })()).join(' '));
    return unmet;
  }
};

PrereqUtils = {
  prereqsToString: function(prereq) {
    var p;
    if (!(prereq != null)) {
      return "";
    }
    if (prereq.subject) {
      return Course.hashCourse(prereq);
    }
    if (prereq.op) {
      if (typeof prereq.op === 'string') {
        return "(" + ((function() {
          var _i, _len, _ref, _results;
          _ref = prereq.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(PrereqUtils.prereqsToString(p));
          }
          return _results;
        })()).join(" " + prereq.op + " ") + ")";
      } else {
        return "";
      }
    }
  },
  prunePrereqs: function(prereq, courses) {
    var course, prunedBranch, ret, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    if (!(prereq != null)) {
      throw new Error("Yikes.  We errored while pruning the prereqs!");
    }
    ret = {
      op: 'and',
      data: []
    };
    if (prereq.subject) {
      if (courses.indexOf(BasicCourse.hashCourse(prereq)) === -1) {
        ret.data.push(prereq);
      }
    }
    switch (prereq.op) {
      case 'or':
        ret.op = 'or';
        _ref = prereq.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          course = _ref[_i];
          prunedBranch = PrereqUtils.prunePrereqs(course, courses);
          if (((_ref1 = prunedBranch.data) != null ? _ref1.length : void 0) === 0) {
            return {
              op: 'and',
              data: []
            };
          }
          ret.data.push(prunedBranch);
        }
        break;
      case 'and':
        _ref2 = prereq.data;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          course = _ref2[_j];
          prunedBranch = PrereqUtils.prunePrereqs(course, courses);
          if (((_ref3 = prunedBranch.data) != null ? _ref3.length : void 0) !== 0) {
            ret.data.push(prunedBranch);
          }
        }
    }
    return ret;
  },
  simplifyPrereqs: function(prereq) {
    var removeParen;
    removeParen = function(prereq) {
      var p;
      if (!(prereq.data != null)) {
        return prereq;
      }
      if (prereq.data.length === 1) {
        return removeParen(prereq.data[0]);
      }
      return {
        op: prereq.op,
        data: (function() {
          var _i, _len, _ref, _results;
          _ref = prereq.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(removeParen(p));
          }
          return _results;
        })()
      };
    };
    return removeParen(prereq);
  },
  flattenPrereqs: function(prereq) {
    var c, ret, _i, _len, _ref;
    if (prereq != null ? prereq.subject : void 0) {
      return [prereq];
    }
    if (prereq != null ? prereq.op : void 0) {
      ret = [];
      _ref = prereq.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        ret = ret.concat(PrereqUtils.flattenPrereqs(c));
      }
      return ret;
    }
    return [];
  },
  prereqsToDivs: function(prereq, manager) {
    var course, courseElm, divs, elm, number, prereqsToDivs, subject, _i, _len, _ref;
    prereqsToDivs = function(prereq) {
      var hash, p;
      if (!(prereq != null)) {
        return "";
      }
      if (prereq.subject) {
        hash = BasicCourse.hashCourse(prereq);
        return "<course id='" + hash + "' subject='" + prereq.subject + "' number='" + prereq.number + "'>" + hash + "</course>";
      }
      if (prereq.op) {
        if (typeof prereq.op === 'string') {
          return ("<ul class='prereq-tree prereq-" + prereq.op + "'><li class='prereq-tree prereq-" + prereq.op + "'>") + ((function() {
            var _i, _len, _ref, _results;
            _ref = prereq.data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              p = _ref[_i];
              _results.push(prereqsToDivs(p));
            }
            return _results;
          })()).join("</li><li class='prereq-tree prereq-" + prereq.op + "'>") + "</ul>";
        } else {
          return "";
        }
      }
    };
    divs = $(prereqsToDivs(prereq));
    if (!manager) {
      return divs;
    }
    _ref = divs.find('course');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elm = _ref[_i];
      subject = elm.getAttribute('subject');
      number = elm.getAttribute('number');
      course = manager.createCourseButton({
        subject: subject,
        number: number
      }, {
        clickable: true,
        insertOnClick: true
      });
      courseElm = course.getButton();
      elm.parentNode.replaceChild(courseElm, elm);
    }
    return divs;
  },
  computePrereqTree: function(courses, selected) {
    var course, pruned, ret, _i, _len, _ref;
    if (selected == null) {
      selected = [];
    }
    if (!(courses != null)) {
      throw new Error("computePrereqTree requires a list of course hash's");
    }
    ret = {
      op: 'and',
      data: []
    };
    for (_i = 0, _len = courses.length; _i < _len; _i++) {
      course = courses[_i];
      if (typeof course === 'string') {
        throw new Error("cannot computePrereqTree with courses given as strings");
      }
      if (!course.wasSynced) {
        throw new Error("attempting to compute prereqs of " + course + " when data isn't synced");
      }
      if (course.prereqs != null) {
        pruned = PrereqUtils.prunePrereqs(course.prereqs, selected);
        if (((_ref = pruned.data) != null ? _ref.length : void 0) > 0) {
          pruned.requiredBy = course;
          ret.data.push(pruned);
        }
      }
    }
    ret = PrereqUtils.simplifyPrereqs(ret);
    return ret;
  }
};

/*
# Parent class of various course buttons
*/


BasicCourse = (function() {

  BasicCourse.hashCourse = function(course) {
    return "" + course.subject + " " + course.number;
  };

  function BasicCourse(data, synced) {
    var _ref;
    this.data = data;
    if (synced == null) {
      synced = false;
    }
    this.hash = BasicCourse.hashCourse(this.data);
    _ref = this.data, this.subject = _ref.subject, this.number = _ref.number, this.prereqs = _ref.prereqs;
    this.state = {
      required: false,
      elective: false,
      selected: false,
      prereq: false
    };
    this.wasSynced = synced;
  }

  BasicCourse.prototype.toString = function() {
    return this.hash;
  };

  BasicCourse.prototype.update = function(data) {
    this.data = data;
    return this.prereqs = this.data.prereqs;
  };

  BasicCourse.prototype.setState = function(state) {
    var ret, s, v;
    ret = {};
    for (s in state) {
      v = state[s];
      if (this.state[s] !== v) {
        ret[s] = v;
        this.state[s] = v;
      }
    }
    return ret;
  };

  return BasicCourse;

})();

/*
# Rectangular button that displays a course's number and state
*/


CourseButton = (function(_super) {

  __extends(CourseButton, _super);

  function CourseButton(data) {
    CourseButton.__super__.constructor.call(this, data);
    this.getButton();
  }

  CourseButton.prototype.setState = function(state, ops) {
    var changedState, s, v;
    if (ops == null) {
      ops = {};
    }
    changedState = CourseButton.__super__.setState.call(this, state);
    if (!ops.forceUpdate) {
      state = changedState;
    }
    if (!this.elm) {
      return state;
    }
    for (s in state) {
      v = state[s];
      if (v) {
        this.$elm.addClass(s);
      } else {
        this.$elm.removeClass(s);
      }
    }
    return state;
  };

  CourseButton.prototype.getButton = function() {
    if (this.elm) {
      return this.elm;
    }
    this.$elm = $("<div class='course' subject='" + this.subject + "' number='" + this.number + "'><div class='annotation'></div><div class='number'>" + this.subject + " " + this.number + "</div></div>");
    this.$elm.disableSelection();
    this.elm = this.$elm[0];
    this.elm.course = this;
    this.setState(this.state);
    return this.elm;
  };

  CourseButton.prototype.removeButton = function() {
    if (!this.elm) {
      return;
    }
    this.elm.course = null;
    this.$elm.remove();
    return this.elm = this.$elm = null;
  };

  return CourseButton;

})(BasicCourse);

/*
# Set of three toggle buttons that change (and reflect) the state of a course
*/


CourseStateButton = (function(_super) {

  __extends(CourseStateButton, _super);

  function CourseStateButton(data) {
    CourseStateButton.__super__.constructor.call(this, data);
    this.getButton();
  }

  CourseStateButton.prototype.getButton = function() {
    if (this.elm) {
      return this.elm;
    }
    this.$elm = $("<div class='course-status'>\n        <input type='radio' name='state' value='none' id='course-notincluded' /><label for='course-notincluded'>Not Included</label>\n        <input type='radio' name='state' value='required' id='course-required' /><label for='course-required'>Required</label>\n        <input type='radio' name='state' value='elective' id='course-elective' /><label for='course-elective'>Elective</label>\n</div>");
    this.$elm.buttonset();
    return this.elm = this.$elm[0];
  };

  CourseStateButton.prototype.setState = function(state, ops) {
    var changedState,
      _this = this;
    if (ops == null) {
      ops = {};
    }
    changedState = CourseStateButton.__super__.setState.call(this, state);
    if (!ops.forceUpdate) {
      state = changedState;
    }
    if ((!this.elm || Object.keys(state).length === 0) && !ops.forceUpdate) {
      return state;
    }
    this.$elm.find('input').attr('checked', false);
    if (this.state.required) {
      this.$elm.find('input[value=required]').attr('checked', true);
    } else if (this.state.elective) {
      this.$elm.find('input[value=elective]').attr('checked', true);
    } else {
      this.$elm.find('input[value=none]').attr('checked', true);
    }
    window.setTimeout((function() {
      return _this.$elm.buttonset('refresh');
    }), 0);
    return state;
  };

  CourseStateButton.prototype.removeButton = function() {
    if (!this.elm) {
      return;
    }
    this.elm.course = null;
    this.$elm.remove();
    return this.elm = this.$elm = null;
  };

  return CourseStateButton;

})(BasicCourse);

/*
# Holds a group of courses
*/


Electives = (function() {

  function Electives(data) {
    this.title = data.title, this.requirements = data.requirements, this.courses = data.courses, this.number = data.number;
    this.state = {};
    if (!(this.requirements != null)) {
      this.requirements = {
        units: 1.5,
        unitLabel: 'units'
      };
    }
    if (!(this.courses != null)) {
      this.courses = {};
    }
    this.subject = this.title;
    this.number = this.number || Math.random().toFixed(8);
    this.hash = BasicCourse.hashCourse(this);
  }

  Electives.prototype.toString = function() {
    return this.hash;
  };

  Electives.prototype.addCourse = function(course) {
    return this.courses[course] = course;
  };

  Electives.prototype.removeCourse = function(course) {
    return delete this.courses[course];
  };

  Electives.prototype.setState = function(state) {
    var ret, s, v;
    ret = {};
    for (s in state) {
      v = state[s];
      if (this.state[s] !== v) {
        ret[s] = v;
        this.state[s] = v;
      }
    }
    return ret;
  };

  Electives.prototype.update = function(data) {
    var k, v;
    for (k in data) {
      v = data[k];
      this[k] = v;
    }
    return this.hash = BasicCourse.hashCourse(this);
  };

  Electives.prototype.getValues = function() {
    return {
      title: this.title,
      requirements: this.requirements,
      courses: this.courses
    };
  };

  return Electives;

})();

ElectivesButton = (function(_super) {

  __extends(ElectivesButton, _super);

  function ElectivesButton(data, manager) {
    this.manager = manager;
    ElectivesButton.__super__.constructor.call(this, data);
    this.getButton();
  }

  ElectivesButton.prototype.setState = function(state, ops) {
    var changedState, s, v;
    if (ops == null) {
      ops = {};
    }
    changedState = ElectivesButton.__super__.setState.call(this, state);
    if (!ops.forceUpdate) {
      state = changedState;
    }
    if (!this.elm) {
      return state;
    }
    for (s in state) {
      v = state[s];
      if (v) {
        this.$elm.addClass(s);
      } else {
        this.$elm.removeClass(s);
      }
    }
    return state;
  };

  ElectivesButton.prototype.getButton = function() {
    var course, hash, _ref;
    if (this.elm) {
      return this.elm;
    }
    this.$elm = $("<div class=\"electives-block\" subject=\"" + this.subject + "\" number=\"" + this.number + "\">\n	<div class=\"title\">" + this.title + "</div>\n	<div class=\"requirement\">At least " + this.requirements.units + " " + this.requirements.unitLabel + "</div>\n	<div class=\"courses-list\"></div>\n</div>");
    this.elm = this.$elm[0];
    this.$coursesDiv = this.$elm.find('.courses-list');
    _ref = this.courses;
    for (hash in _ref) {
      course = _ref[hash];
      this.addCourse(course);
    }
    return this.elm;
  };

  ElectivesButton.prototype.addCourse = function(course) {
    ElectivesButton.__super__.addCourse.call(this, course);
    if (!course.elm) {
      course = this.courses[BasicCourse.hashCourse(course)] = new CourseButton(course.data);
    }
    return this.$coursesDiv.append(course.elm);
  };

  ElectivesButton.prototype.removeCourse = function(course, ops) {
    var $elm;
    if (ops == null) {
      ops = {
        detach: true
      };
    }
    if (ops.detach) {
      $elm = this.courses[BasicCourse.hashCourse(course)].$elm;
      if ($elm) {
        $elm.detach();
      }
    }
    return ElectivesButton.__super__.removeCourse.call(this, course);
  };

  ElectivesButton.prototype.update = function(data) {
    var elm, _i, _len, _ref;
    ElectivesButton.__super__.update.call(this, data);
    this.courses = {};
    _ref = this.$elm.find('.courses-list').children();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elm = _ref[_i];
      if (elm.course) {
        this.courses[elm.course] = elm.course;
      }
    }
    this.$elm.find('.title').html(this.title);
    this.$elm.find('.requirement').html("At least " + this.requirements.units + " " + this.requirements.unitLabel);
    return this.$elm.attr({
      subject: this.subject,
      number: this.number
    });
  };

  return ElectivesButton;

})(Electives);

ElectivesButtonEditor = (function(_super) {

  __extends(ElectivesButtonEditor, _super);

  function ElectivesButtonEditor(data, manager) {
    this.manager = manager;
    ElectivesButtonEditor.__super__.constructor.call(this, data);
    this.getButton();
  }

  ElectivesButtonEditor.prototype.setState = function(state, ops) {
    var changedState, s, v;
    if (ops == null) {
      ops = {};
    }
    changedState = ElectivesButtonEditor.__super__.setState.call(this, state);
    if (!ops.forceUpdate) {
      state = changedState;
    }
    if (!this.elm) {
      return state;
    }
    for (s in state) {
      v = state[s];
      if (v) {
        this.$elm.addClass(s);
      } else {
        this.$elm.removeClass(s);
      }
    }
    return state;
  };

  ElectivesButtonEditor.prototype.getButton = function() {
    var course, hash, update, _ref,
      _this = this;
    if (this.elm) {
      return this.elm;
    }
    this.$elm = $("<div class='elective-editable'>\n    <div class='title'>Title: <input type='text' value='" + this.title + "'></input></div>\n    <div class='requirements'>At least <input type='text' value='" + this.requirements.units + "'></input> " + this.requirements.unitLabel + "</div>\n    Elective Courses: <div class='dropbox courses-list'>Drop Here</div>\n</div>");
    this.elm = this.$elm[0];
    this.$coursesDiv = this.$elm.find('.courses-list');
    _ref = this.courses;
    for (hash in _ref) {
      course = _ref[hash];
      this.addCourse(course);
    }
    update = function(event) {
      if (_this.manager) {
        return _this.manager.updateElectivesButton(_this);
      }
    };
    this.$elm.find('.title input').change(update);
    this.$elm.find('.requirements input').change(update);
    return this.elm;
  };

  ElectivesButtonEditor.prototype.addCourse = function(course) {
    ElectivesButtonEditor.__super__.addCourse.call(this, course);
    if (!course.elm) {
      course = this.courses[BasicCourse.hashCourse(course)] = new CourseButton(course.data);
    }
    return this.$coursesDiv.append(course.elm);
  };

  ElectivesButtonEditor.prototype.removeCourse = function(course, ops) {
    var $elm;
    if (ops == null) {
      ops = {
        detach: true
      };
    }
    if (ops.detach) {
      $elm = this.courses[BasicCourse.hashCourse(course)].$elm;
      if ($elm) {
        $elm.detach();
      }
    }
    return ElectivesButtonEditor.__super__.removeCourse.call(this, course);
  };

  ElectivesButtonEditor.prototype.update = function(data) {
    ElectivesButtonEditor.__super__.update.call(this, data);
    this.$elm.find('.title input').val(this.title);
    return this.$elm.find('.requirements .input').val(this.requirements.units);
  };

  ElectivesButtonEditor.prototype.getValues = function() {
    this.title = this.$elm.find('.title input').val();
    this.requirements.units = this.$elm.find('.requirements input').val();
    return ElectivesButtonEditor.__super__.getValues.call(this);
  };

  return ElectivesButtonEditor;

})(Electives);

/*
# Class to perform operations on a directed graph like
# searching for multiple paths, finding neighbors, etc.
*/


DiGraph = (function() {

  function DiGraph(edges, nodes) {
    var e, n, _i, _j, _len, _len1;
    if (nodes == null) {
      nodes = [];
    }
    this.nodes = {};
    this.edges = [];
    this.forwardNeighborHash = null;
    this.backwardNeighborHash = null;
    for (_i = 0, _len = nodes.length; _i < _len; _i++) {
      n = nodes[_i];
      this.nodes[n] = true;
    }
    for (_j = 0, _len1 = edges.length; _j < _len1; _j++) {
      e = edges[_j];
      this.edges.push(e.slice());
      this.nodes[e[0]] = true;
      this.nodes[e[1]] = true;
    }
  }

  DiGraph.prototype._generateForwardNeighborHash = function() {
    var e, hash, _i, _len, _ref;
    if (this.forwardNeighborHash) {
      return;
    }
    hash = {};
    _ref = this.edges;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      if (!(hash[e[0]] != null)) {
        hash[e[0]] = [];
      }
      hash[e[0]].push(e[1]);
    }
    return this.forwardNeighborHash = hash;
  };

  DiGraph.prototype._generateBackwardNeighborHash = function() {
    var e, hash, _i, _len, _ref;
    if (this.backwardNeighborHash) {
      return;
    }
    hash = {};
    _ref = this.edges;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      if (!(hash[e[1]] != null)) {
        hash[e[1]] = [];
      }
      hash[e[1]].push(e[0]);
    }
    return this.backwardNeighborHash = hash;
  };

  DiGraph.prototype.edgeSpan = function(node) {
    var findNeighbors, maxDepth, ret,
      _this = this;
    ret = {};
    this._generateForwardNeighborHash();
    maxDepth = Object.keys(this.nodes).length;
    findNeighbors = function(node, depth) {
      var l, _i, _len, _ref;
      ret = [];
      if (depth >= maxDepth || !(node != null) || !(_this.forwardNeighborHash[node] != null)) {
        return ret;
      }
      _ref = _this.forwardNeighborHash[node];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        ret = ret.concat(findNeighbors(l, depth + 1));
      }
      return ret.concat(_this.forwardNeighborHash[node]);
    };
    return findNeighbors(node, 0);
  };

  DiGraph.prototype.isPath = function(n1, n2) {
    return this.edgeSpan(n1).indexOf(n2) !== -1 || this.edgeSpan(n2).indexOf(n1) !== -1;
  };

  DiGraph.prototype.eliminateRedundantEdgesToNode = function(node) {
    var ancestors, n, s, span, spanHash, _i, _j, _k, _len, _len1, _len2;
    this._generateBackwardNeighborHash();
    this._generateForwardNeighborHash();
    ancestors = this.backwardNeighborHash[node] || [];
    for (_i = 0, _len = ancestors.length; _i < _len; _i++) {
      n = ancestors[_i];
      span = this.edgeSpan(n);
      spanHash = {};
      for (_j = 0, _len1 = span.length; _j < _len1; _j++) {
        s = span[_j];
        spanHash[s] = true;
      }
      for (_k = 0, _len2 = ancestors.length; _k < _len2; _k++) {
        s = ancestors[_k];
        if (s === n) {
          continue;
        }
        if (spanHash[s]) {
          this.removeEdge([n, node]);
          return 1 + this.eliminateRedundantEdgesToNode(node);
        }
      }
    }
    return 0;
  };

  DiGraph.prototype.eliminateRedundantEdges = function() {
    var n, ret;
    ret = 0;
    for (n in this.nodes) {
      ret += this.eliminateRedundantEdgesToNode(n);
    }
    return ret;
  };

  DiGraph.prototype.removeEdge = function(edge) {
    var e, i, indices, _i, _j, _len, _len1, _ref;
    indices = [];
    _ref = this.edges;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      e = _ref[i];
      if (DiGraph.edgesEqual(e, edge)) {
        indices.unshift(i);
      }
    }
    for (_j = 0, _len1 = indices.length; _j < _len1; _j++) {
      i = indices[_j];
      this.edges.splice(i, 1);
    }
    this.forwardNeighborHash = null;
    return this.backwardNeighborHash = null;
  };

  DiGraph.edgesEqual = function(e1, e2) {
    return (e1[0] === e2[0]) && (e1[1] === e2[1]);
  };

  DiGraph.prototype.findForwardNeighborsOfSubgraph = function(subgraphNodes) {
    var child, n, nodes, ret, _i, _j, _len, _len1, _ref;
    if (subgraphNodes instanceof Array) {
      nodes = subgraphNodes;
      subgraphNodes = {};
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        n = nodes[_i];
        subgraphNodes[n] = true;
      }
    }
    this._generateForwardNeighborHash();
    ret = {};
    for (n in subgraphNodes) {
      _ref = this.forwardNeighborHash[n] || [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        child = _ref[_j];
        if (!subgraphNodes[child]) {
          ret[child] = true;
        }
      }
    }
    return ret;
  };

  DiGraph.prototype.findBackwardNeighborsOfSubgraph = function(subgraphNodes) {
    var child, n, nodes, ret, _i, _j, _len, _len1, _ref;
    if (subgraphNodes instanceof Array) {
      nodes = subgraphNodes;
      subgraphNodes = {};
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        n = nodes[_i];
        subgraphNodes[n] = true;
      }
    }
    this._generateBackwardNeighborHash();
    ret = {};
    for (n in subgraphNodes) {
      _ref = this.backwardNeighborHash[n] || [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        child = _ref[_j];
        if (!subgraphNodes[child]) {
          ret[child] = true;
        }
      }
    }
    return ret;
  };

  DiGraph.prototype.findSources = function() {
    var n, ret;
    ret = [];
    this._generateBackwardNeighborHash;
    for (n in this.nodes) {
      if (!this.backwardNeighborHash[n]) {
        ret.push(n);
      }
    }
    return ret;
  };

  DiGraph.prototype.toDot = function(name, titles, clusters) {
    var c, clust, e, i, ret, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
    if (titles == null) {
      titles = {};
    }
    if (clusters == null) {
      clusters = [];
    }
    ret = "digraph " + name + " {\n";
    ret += "\trankdir=LR\n";
    ret += "\tnode [shape=box,style=rounded]\n";
    _ref = this.edges;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      e = _ref[_i];
      ret += "\t\"" + e[0] + "\" -> \"" + e[1] + "\"\n";
    }
    ret += "\n";
    for (i = _j = 0, _len1 = clusters.length; _j < _len1; i = ++_j) {
      clust = clusters[i];
      ret += "\tsubgraph cluster" + i + " {\n";
      _ref1 = clust.nodes;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        c = _ref1[_k];
        ret += "\t\t\t\"" + c.hash + "\"\n";
      }
      ret += "\t}\n";
    }
    _ref2 = [1, 2, 3, 4];
    for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
      i = _ref2[_l];
      if (this.years) {
        ret += "\tsubgraph year" + i + " {\n";
        ret += "\t\trank=same\n";
        ret += "\t\tlabel=\"Year " + i + "\"\n";
        _ref3 = this.years[i];
        for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
          c = _ref3[_m];
          ret += "\t\t\t\"" + c.hash + "\" [label=<<font color=\"red\">" + c.hash + "</font><br/><font color=\"blue\">" + titles[c] + "</font>>]\n";
        }
        ret += "\n\t}\n";
      }
    }
    ret += "}";
    return ret;
  };

  return DiGraph;

})();
