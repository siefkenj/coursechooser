// Generated by CoffeeScript 1.4.0
var BasicCourse, CourseButton, CourseManager, CourseStateButton, CourseUtils, Electives, ElectivesButton, ElectivesButtonEditor, Graph, PrereqUtils, SVGGraphManager, attachedToDom, dupObject, htmlEncode, objKeysEqual, objToString, objValsToArray, onPreviewPageShow, parseCourseListString, parseUrlHash, prepareNavMenu, prepareWelcomePage, reparent, showPage, strWidthInEn, symmetricDiffObjects, titleCaps,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

objToString = function(obj) {
  var p, ret, v;
  ret = '{ ';
  for (p in obj) {
    v = obj[p];
    ret += " " + p + ":" + v + ", ";
  }
  return ret + "}";
};

attachedToDom = function(elm) {
  if (!elm || !(elm.parentNode != null)) {
    return false;
  } else if (elm.parentNode === document) {
    return true;
  }
  return attachedToDom(elm.parentNode);
};

objValsToArray = function(obj) {
  var k, v;
  return (function() {
    var _results;
    _results = [];
    for (k in obj) {
      v = obj[k];
      _results.push(v);
    }
    return _results;
  })();
};

symmetricDiffObjects = function(obj1, obj2) {
  var k, ret1, ret2;
  ret1 = {};
  ret2 = {};
  for (k in obj1) {
    if (!obj2[k]) {
      ret1[k] = obj1[k];
    }
  }
  for (k in obj2) {
    if (!obj1[k]) {
      ret2[k] = obj2[k];
    }
  }
  return {
    missing: ret1,
    excess: ret2
  };
};

objKeysEqual = function(obj1, obj2) {
  var k;
  for (k in obj1) {
    if (!(obj2[k] != null)) {
      return false;
    }
  }
  for (k in obj2) {
    if (!(obj1[k] != null)) {
      return false;
    }
  }
  return true;
};

dupObject = function(obj) {
  var k, ret, v;
  ret = {};
  for (k in obj) {
    v = obj[k];
    ret[k] = v;
  }
  return ret;
};

htmlEncode = function(str) {
  str = '' + str;
  try {
    str = str.replace('&', '&amp;', 'g').replace('<', '&lt;', 'g').replace('>', '&gt;', 'g');
  } catch (e) {
    console.log('error, expected string, got', str);
  }
  return str;
};

parseUrlHash = function(hash) {
  var h, m, ret, _i, _len;
  hash = hash.split(/[&?]/);
  ret = {
    hash: null,
    args: []
  };
  for (_i = 0, _len = hash.length; _i < _len; _i++) {
    h = hash[_i];
    if (m = h.match(/^#[\w-]+/)) {
      ret.hash = m[0];
    }
    if (h.match('=')) {
      ret.args.push(h.split('='));
    }
  }
  return ret;
};

strWidthInEn = function(str) {
  var numSkinny, numSpaces, numWide, _ref, _ref1, _ref2;
  if (str == null) {
    str = '';
  }
  str = '' + str;
  numWide = ((_ref = str.match(/[A-HJ-Zmw]/)) != null ? _ref.length : void 0) || 0;
  numSkinny = ((_ref1 = str.match(/[Iijlt:]/)) != null ? _ref1.length : void 0) || 0;
  numSpaces = ((_ref2 = str.match(/[ ]/)) != null ? _ref2.length : void 0) || 0;
  return str.length + .2 * numWide - .7 * numSkinny - .2 * numSpaces;
};

titleCaps = function(str) {
  var exceptionalWords, firstWord, i, ret, shouldCapitalize, tokens, upper, word, _i, _len, _ref, _ref1;
  if (!str) {
    return '';
  }
  upper = function(word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
  };
  exceptionalWords = /^(a|an|and|as|at|but|by|en|for|if|in|of|on|or|the|to|v[.]?|via|vs[.]?|with|amp|gt|lt)$/;
  str = str.toLowerCase();
  tokens = ('' + str).split(/\b/);
  ret = '';
  firstWord = true;
  for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
    word = tokens[i];
    shouldCapitalize = true;
    if (word.match(exceptionalWords)) {
      shouldCapitalize = false;
    }
    if (firstWord) {
      shouldCapitalize = true;
    }
    if (((_ref = tokens[i - 1]) != null ? _ref.slice(-1) : void 0) === '&' && ((_ref1 = tokens[i + 1]) != null ? _ref1.charAt(0) : void 0) === ';') {
      shouldCapitalize = false;
    }
    if (firstWord && word.match(/\b/)) {
      firstWord = false;
    }
    if (word.match(/^(i|v|x|l|c|d|m)+$/i)) {
      word = word.toUpperCase();
    } else if (shouldCapitalize) {
      word = upper(word);
    }
    ret += word;
  }
  return ret;
};

parseCourseListString = function(val) {
  var courses, i, subject, subjects, unknownCourses, v, _i, _len, _ref;
  subjects = {};
  courses = [];
  unknownCourses = [];
  val = val.toUpperCase();
  val = val.replace(/([A-Z])(\d)/g, "$1 $2");
  val = val.split(/[^a-zA-Z0-9]+/);
  subject = null;
  for (i = _i = 0, _len = val.length; _i < _len; i = ++_i) {
    v = val[i];
    if (v.length === 0) {
      continue;
    }
    if (v.match(/^[a-zA-Z]/)) {
      subject = v;
      if (!((_ref = val[i + 1]) != null ? _ref.match(/^\d/) : void 0)) {
        subjects[subject] = true;
      }
    } else {
      if (!(subject != null)) {
        unknownCourses.push(v);
        continue;
      }
      courses.push({
        subject: subject,
        number: v
      });
    }
  }
  return {
    courses: courses,
    subjects: subjects,
    unknownCourses: unknownCourses
  };
};

reparent = function(elm, newParent, ops) {
  var newOffset, oldOffset, tmp;
  if (ops == null) {
    ops = {};
  }
  if (!ops.animate) {
    $(elm).appendTo(newParent);
    return;
  }
  elm = $(elm);
  newParent = $(newParent);
  oldOffset = ops.origin || elm.offset();
  elm.appendTo(newParent);
  newOffset = ops.target || elm.offset();
  tmp = elm.clone().appendTo('body');
  tmp.css({
    position: 'absolute',
    left: oldOffset.left,
    top: oldOffset.top,
    'zIndex': 1000
  });
  elm.css({
    visibility: 'hidden'
  });
  tmp.animate({
    top: newOffset.top,
    left: newOffset.left
  }, {
    duration: 750,
    easing: 'easeOutCubic',
    complete: function() {
      elm.show();
      elm.css({
        visibility: 'visible'
      });
      tmp.remove();
      if (ops.complete && !ops.complete.hasRun) {
        ops.complete();
        return ops.complete.hasRun = true;
      }
    }
  });
};

$(document).ready(function() {
  var arg, locHash, preloadSubjects, subject, _i, _j, _len, _len1, _ref, _ref1;
  $('.course-status').buttonset().disableSelection();
  $('button').button();
  $('#department-list').combobox().combobox('value', '');
  $('#tabs').tabs();
  /*
      $(document).tooltip
          show:
              effect: 'fade'
              delay: 1000
  */

  locHash = parseUrlHash(window.location.hash);
  window.location.hash = window.location.hash || '#welcome';
  prepareWelcomePage();
  prepareNavMenu();
  window.courseManager = new CourseManager;
  window.courses = window.courseManager.courses;
  preloadSubjects = [];
  _ref = locHash.args;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    arg = _ref[_i];
    if (arg[0] === 'load') {
      preloadSubjects = preloadSubjects.concat(((_ref1 = arg[1]) != null ? _ref1.split(/,/) : void 0) || []);
    }
  }
  for (_j = 0, _len1 = preloadSubjects.length; _j < _len1; _j++) {
    subject = preloadSubjects[_j];
    window.courseManager.showCoursesOfSubject(subject);
  }
  $('#show-courses').click(function() {
    var c, courses, createDisplayCallback, createErrorCallback, errorMsgHash, subjects, unknownCourses, v, _k, _l, _len2, _len3, _ref2, _results;
    errorMsgHash = {};
    subjects = {};
    courses = [];
    unknownCourses = [];
    try {
      _ref2 = parseCourseListString($('#department-list').combobox('value')), courses = _ref2.courses, subjects = _ref2.subjects, unknownCourses = _ref2.unknownCourses;
    } catch (e) {
      subjects[$('#department-list option:selected()').val()] = true;
    }
    for (v in subjects) {
      createErrorCallback = function(sub) {
        return function() {
          errorMsgHash["Could not load subject '" + sub + "'"] = true;
          return $('#department-list').combobox('showError', ((function() {
            var _results;
            _results = [];
            for (e in errorMsgHash) {
              _results.push(e);
            }
            return _results;
          })()).join('<br/>'));
        };
      };
      try {
        window.courseManager.showCoursesOfSubject(v, {
          error: createErrorCallback(v),
          animate: 'slow'
        });
      } catch (e) {
        console.log(e);
      }
    }
    for (_k = 0, _len2 = courses.length; _k < _len2; _k++) {
      c = courses[_k];
      createErrorCallback = function(sub) {
        return function() {
          errorMsgHash["Could not load course '" + sub.subject + " " + sub.number + "'"] = true;
          return $('#department-list').combobox('showError', ((function() {
            var _results;
            _results = [];
            for (e in errorMsgHash) {
              _results.push(e);
            }
            return _results;
          })()).join('<br/>'));
        };
      };
      createDisplayCallback = function(c) {
        return function() {
          return window.courseManager.ensureDisplayedInYearChart(c, {
            error: createErrorCallback(c),
            animate: 'slow'
          });
        };
      };
      try {
        window.courseManager.loadSubjectData(c.subject, createDisplayCallback(c), {
          error: createErrorCallback(c),
          animate: 'slow'
        });
      } catch (e) {
        console.log(e);
      }
    }
    _results = [];
    for (_l = 0, _len3 = unknownCourses.length; _l < _len3; _l++) {
      c = unknownCourses[_l];
      errorMsgHash["Could not determine subject code for course '" + c + "'"] = true;
      _results.push($('#department-list').combobox('showError', ((function() {
        var _results1;
        _results1 = [];
        for (e in errorMsgHash) {
          _results1.push(e);
        }
        return _results1;
      })()).join('<br/>')));
    }
    return _results;
  });
  $('#hide-courses').click(function() {
    var c, courses, subjects, unknownCourses, v, _k, _len2, _ref2, _results;
    subjects = {};
    courses = [];
    unknownCourses = [];
    try {
      _ref2 = parseCourseListString($('#department-list').combobox('value')), courses = _ref2.courses, subjects = _ref2.subjects, unknownCourses = _ref2.unknownCourses;
    } catch (e) {
      subjects[$('#department-list option:selected()').val()] = true;
    }
    for (v in subjects) {
      window.courseManager.hideCoursesOfSubject(v, {
        animate: 'slow'
      });
    }
    _results = [];
    for (_k = 0, _len2 = courses.length; _k < _len2; _k++) {
      c = courses[_k];
      _results.push(window.courseManager.hideCourse(c, {
        animate: 'slow'
      }));
    }
    return _results;
  });
  $('.year').droppable({
    hoverClass: 'highlight',
    tolerance: 'pointer',
    drop: function(event, ui) {
      var courses;
      courses = this.getElementsByClassName('courses')[0];
      courses.appendChild(ui.draggable[0]);
      window.courseManager.selectCourse(ui.draggable[0].course);
      return window.courseManager.courseMoved(ui.draggable[0].course);
    }
  });
  $('#create-new-electives').click(function() {
    var elective, electiveButton;
    elective = new ElectivesButtonEditor({
      title: 'Electives'
    }, window.courseManager);
    electiveButton = new ElectivesButton(elective);
    $('#electives-list').append(elective.getButton());
    $('#electives-list').append("<hr />");
    $('.year1 .courses').append(electiveButton.getButton());
    window.courseManager.addCourse(electiveButton);
    window.courseManager.sortableCourses[electiveButton] = electiveButton;
    window.courseManager.addCourse(elective);
    window.courseManager.makeCourseButtonDraggable(electiveButton);
    window.courseManager.makeElectivesButtonDroppable(electiveButton);
    window.courseManager.makeElectivesButtonClickable(electiveButton);
    return window.courseManager.makeElectivesButtonClickable(elective);
  });
  return typeof window.onhashchange === "function" ? window.onhashchange() : void 0;
});

prepareWelcomePage = function() {
  var $elm, $link, elm, makeLinkShow, _i, _len, _ref;
  makeLinkShow = function(link, elm) {
    var hide, show;
    show = function() {
      elm.show();
      return link.html("Hide Details");
    };
    hide = function() {
      elm.hide();
      return link.html("Show Details");
    };
    return link.toggle(show, hide);
  };
  _ref = $("#welcome li div.more");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    elm = _ref[_i];
    $elm = $(elm);
    $elm.hide();
    $link = $('<a class="more" href="javascript: void 0;">Show Details</a>').appendTo($elm.parent().find('p')[0]);
    makeLinkShow($link, $elm);
  }
  $('#goto-course-chooser').click(function() {
    return showPage('#course-chooser', {
      animate: true,
      complete: (function() {
        return $('#show-courses').trigger('click');
      })
    });
  });
};

prepareNavMenu = function() {
  var elm, makeLinkShow, target, _i, _len, _ref;
  makeLinkShow = function(link, target) {
    return link.click(function() {
      return showPage(target, {
        animate: false
      });
    });
  };
  _ref = $('#menu-nav a');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    elm = _ref[_i];
    elm = $(elm);
    target = elm.attr('href');
    makeLinkShow(elm, target);
  }
  $('a[page=#preview]').click(function() {
    return onPreviewPageShow();
  });
  window.onhashchange = function() {
    var hash;
    hash = parseUrlHash(window.location.hash).hash;
    return $("a[page=" + hash + "]").click();
  };
};

showPage = function(page, ops) {
  var container, currentPageContainers, doesntNeedAnimation, elm, id, needsAnimation, newPageContainers, offsets, target, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1;
  if (ops == null) {
    ops = {};
  }
  if (typeof page !== 'string') {
    throw new Error("showPage expects page to be a string, not " + page);
  }
  _ref = $('#menu-nav a');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    elm = _ref[_i];
    elm = $(elm);
    if (elm.attr('page') === page) {
      elm.addClass('active');
    } else {
      elm.removeClass('active');
    }
  }
  target = $(page);
  if (!ops.animate) {
    $('.page').hide();
    _ref1 = target.find('.container');
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      elm = _ref1[_j];
      id = elm.getAttribute('contains');
      reparent($(id), elm, ops);
    }
    target.show();
    return;
  }
  currentPageContainers = (function() {
    var _k, _len2, _ref2, _results;
    _ref2 = $($('.page:visible')).find('.container');
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      elm = _ref2[_k];
      _results.push(elm.getAttribute('contains'));
    }
    return _results;
  })();
  newPageContainers = (function() {
    var _k, _len2, _ref2, _results;
    _ref2 = target.find('.container');
    _results = [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      elm = _ref2[_k];
      _results.push(elm.getAttribute('contains'));
    }
    return _results;
  })();
  needsAnimation = [];
  doesntNeedAnimation = [];
  for (_k = 0, _len2 = newPageContainers.length; _k < _len2; _k++) {
    elm = newPageContainers[_k];
    if (currentPageContainers.indexOf(elm) >= 0) {
      needsAnimation.push(elm);
    } else {
      doesntNeedAnimation.push(elm);
    }
  }
  offsets = {};
  for (_l = 0, _len3 = needsAnimation.length; _l < _len3; _l++) {
    elm = needsAnimation[_l];
    offsets[elm] = $(elm).offset();
  }
  for (_m = 0, _len4 = doesntNeedAnimation.length; _m < _len4; _m++) {
    elm = doesntNeedAnimation[_m];
    container = target.find(".container[contains=" + elm + "]");
    reparent(elm, container, ops);
  }
  $('.page').hide();
  target.show();
  for (_n = 0, _len5 = needsAnimation.length; _n < _len5; _n++) {
    elm = needsAnimation[_n];
    container = target.find(".container[contains=" + elm + "]");
    reparent(elm, container, {
      animate: true,
      origin: offsets[elm],
      complete: ops.complete
    });
  }
};

onPreviewPageShow = function() {
  var render;
  render = function() {
    var ast, dotCode, preview, svgManager, xdotCode;
    dotCode = window.courseManager.createDotGraph();
    xdotCode = Viz(dotCode, 'xdot');
    xdotCode = xdotCode.slice(xdotCode.indexOf('digraph {'));
    ast = DotParser.parse(xdotCode);
    console.log(ast);
    svgManager = new SVGGraphManager(new SVGDot(ast));
    preview = svgManager.svg;
    return $('#preview').html(preview);
  };
  if (!(window.Viz != null)) {
    $('#preview').html('loading graphviz library');
    return $.getScript('js/viz-2.26.3.js', function() {
      $('#preview').html('graphviz library loaded');
      return render();
    });
  } else {
    return window.setTimeout(render, 0);
  }
};

SVGGraphManager = (function() {

  function SVGGraphManager(svgGraph) {
    var _this = this;
    this.svgGraph = svgGraph;
    this.svgGraph.render();
    this.svg = this.svgGraph.svg;
    this.$svg = $(this.svgGraph.svg);
    this.$svg.find('.node').click(function(event) {
      var id, number, subject, _ref;
      id = event.currentTarget.getAttribute('id');
      _ref = id.split('-'), subject = _ref[0], number = _ref[1];
      return _this.nodeClicked({
        subject: subject,
        number: number
      });
    });
  }

  SVGGraphManager.prototype.nodeClicked = function(course) {
    return console.log(course, course.subject, course.number);
  };

  return SVGGraphManager;

})();

/*
# Class to manage and keep the sync of all course on the webpage
# and their state.
*/


CourseManager = (function() {

  CourseManager.prototype.DISPLAYABLE_STATES = ['required', 'elective', 'core'];

  function CourseManager() {
    this.courseDataLoaded = __bind(this.courseDataLoaded, this);
    this.courses = {};
    this.courseData = {};
    this.sortableCourses = {};
    this.sortableCoursesStateButtons = {};
    this.loadedSubjects = {};
    this.loadingStatus = {};
    this.onSubjectLoadedCallbacks = {};
    this.graphState = new Graph;
  }

  CourseManager.prototype.updateGraphState = function() {
    var cluster, clusterHash, clusters, course, courses, elm, filterDisplayable, hash, year, _i, _j, _k, _l, _len, _len1, _len2, _m, _ref, _ref1, _ref2,
      _this = this;
    filterDisplayable = function(list) {
      var c, state, _i, _len, _ref, _ref1;
      if (!list) {
        return list;
      }
      if (!(list.length != null)) {
        _ref = _this.DISPLAYABLE_STATES;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          state = _ref[_i];
          if ((_ref1 = list.state) != null ? _ref1[state] : void 0) {
            return true;
          }
        }
        return false;
      }
      return (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
          c = list[_j];
          if (filterDisplayable(c)) {
            _results.push(c);
          }
        }
        return _results;
      })();
    };
    courses = {};
    for (year = _i = 1; _i <= 4; year = ++_i) {
      _ref = $(".year" + year + " .course");
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        elm = _ref[_j];
        hash = BasicCourse.hashCourse({
          subject: elm.getAttribute('subject'),
          number: elm.getAttribute('number')
        });
        course = this.sortableCourses[hash];
        if (filterDisplayable(course)) {
          courses[hash] = {
            course: course,
            year: year
          };
        }
      }
    }
    clusters = {};
    for (year = _k = 1; _k <= 4; year = ++_k) {
      _ref1 = $(".year" + year + " .electives-block");
      for (_l = 0, _len1 = _ref1.length; _l < _len1; _l++) {
        cluster = _ref1[_l];
        clusterHash = BasicCourse.hashCourse({
          subject: cluster.getAttribute('subject'),
          number: cluster.getAttribute('number')
        });
        clusters[clusterHash] = {
          cluster: this.sortableCourses[clusterHash],
          year: year,
          courses: []
        };
        _ref2 = $(cluster).find('.course');
        for (_m = 0, _len2 = _ref2.length; _m < _len2; _m++) {
          elm = _ref2[_m];
          hash = BasicCourse.hashCourse({
            subject: elm.getAttribute('subject'),
            number: elm.getAttribute('number')
          });
          course = this.sortableCourses[hash];
          if (filterDisplayable(course)) {
            clusters[clusterHash].courses.push(course);
          }
        }
      }
    }
    this.graphState.nodes = courses;
    this.graphState.clusters = clusters;
    this.graphState.pruneOrphanedEdges();
    this.graphState.generateEdges();
    return this.graphState;
  };

  CourseManager.prototype.updateCourseState = function(course, state, ops) {
    var c, _i, _len, _ref,
      _this = this;
    if (ops == null) {
      ops = {
        updatePrereqs: true
      };
    }
    _ref = this.courses[course] || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      if (!c.selectable) {
        state = dupObject(state);
        delete state.selected;
      }
      c.setState(state);
    }
    if (ops.updatePrereqs) {
      return window.setTimeout((function() {
        return _this.showUnmetPrereqs();
      }), 500);
    }
  };

  CourseManager.prototype.addCourse = function(course) {
    var hash;
    hash = '' + course;
    if (!this.courses[hash]) {
      this.courses[hash] = [];
    }
    this.courses[hash].push(course);
    return course;
  };

  CourseManager.prototype.removeCourse = function(course) {
    var hash, index;
    hash = '' + course;
    if (!this.courses[hash]) {
      return false;
    }
    index = this.courses[hash].indexOf(course);
    if (index >= 0) {
      return this.courses[hash].splice(index, 1);
    }
  };

  CourseManager.prototype.removeAllCourseInstances = function(course) {
    return delete this.courses[course];
  };

  CourseManager.prototype.cleanupUnattachedButtons = function(course, buttonType) {
    var clean,
      _this = this;
    if (buttonType == null) {
      buttonType = CourseButton;
    }
    clean = function() {
      var c, courses, hash, k, v, _i, _len, _ref;
      if (_this.needsCleaning = false) {
        return;
      }
      _this.needsCleaning = false;
      courses = [];
      if (!course) {
        _ref = _this.courses;
        for (k in _ref) {
          v = _ref[k];
          courses = courses.concat(v);
        }
      } else {
        hash = BasicCourse.hashCourse(course);
        courses = _this.courses[hash] || [];
      }
      for (_i = 0, _len = courses.length; _i < _len; _i++) {
        c = courses[_i];
        if (c instanceof buttonType && !attachedToDom(c.elm)) {
          c.removeButton();
          _this.removeCourse(c);
        }
      }
    };
    this.needsCleaning = true;
    return window.setTimeout(clean, 1000);
  };

  CourseManager.prototype.updateElectivesButton = function(button) {
    var course, data, diff, electiveButton, hash, newCourse, _i, _len, _ref, _ref1, _ref2, _results;
    data = button.getValues();
    delete data.courses;
    _ref = this.courses[button] || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      electiveButton = _ref[_i];
      diff = symmetricDiffObjects(button.courses, electiveButton.courses);
      _ref1 = diff['missing'];
      for (hash in _ref1) {
        course = _ref1[hash];
        newCourse = this.createCourseButton(course, {
          clickable: true
        });
        electiveButton.addCourse(newCourse);
      }
      _ref2 = diff['excess'];
      for (hash in _ref2) {
        course = _ref2[hash];
        electiveButton.removeCourse(course);
      }
      _results.push(electiveButton.update(data));
    }
    return _results;
  };

  CourseManager.prototype.selectCourse = function(course) {
    var c, hash, selectedCourse, stateButtons, _ref,
      _this = this;
    if (!course) {
      return;
    }
    selectedCourse = null;
    _ref = this.sortableCourses;
    for (hash in _ref) {
      c = _ref[hash];
      if (c.state.selected) {
        c.setState({
          selected: false
        });
      }
      if (c.subject === (course != null ? course.subject : void 0) && c.number === (course != null ? course.number : void 0)) {
        c.setState({
          selected: true
        });
        selectedCourse = c;
      }
      this.updateCourseState(c, c.state, {
        updatePrereqs: false
      });
    }
    if (!selectedCourse) {
      return;
    }
    if (selectedCourse instanceof BasicCourse) {
      stateButtons = this.sortableCoursesStateButtons[selectedCourse];
      if (!stateButtons) {
        stateButtons = this.createCourseStateButton(selectedCourse);
      }
      $('.course-info .course-name .course-number').html(selectedCourse.hash);
      $('.course-info .course-name .course-title').html(titleCaps(('' + selectedCourse.data.title).toLowerCase()));
      $('.course-info .course-state').children().detach();
      $('.course-info .course-state').html(stateButtons.elm);
      $('.course-info .prereq-area').html(PrereqUtils.prereqsToDivs(stateButtons.prereqs, this));
      window.setTimeout((function() {
        return $('#dot').val(_this.createDotGraph());
      }), 0);
      return this.cleanupUnattachedButtons();
    }
  };

  CourseManager.prototype.createCourseButton = function(course, ops) {
    var updateCourse,
      _this = this;
    if (ops == null) {
      ops = {};
    }
    if (this.courseData[course]) {
      course = new CourseButton(this.courseData[course], true);
    } else {
      course = new CourseButton(course);
      updateCourse = function() {
        if (!_this.courseData[course]) {
          if (course.elm) {
            course.$elm.addClass('defunct');
          }
          return;
        }
        course.update(_this.courseData[course]);
        course.setTooltip(titleCaps(course.data.title));
        return course.wasSynced = true;
      };
      this.loadSubjectData(course.subject, updateCourse);
    }
    if (ops.clickable) {
      this.makeCourseButtonClickable(course, ops);
    }
    if (ops.draggable) {
      this.makeCourseButtonDraggable(course, ops);
    }
    this.addCourse(course);
    this.initButtonState(course);
    return course;
  };

  CourseManager.prototype.makeCourseButtonClickable = function(button, ops) {
    var _this = this;
    if (ops == null) {
      ops = {};
    }
    if (ops.selectable) {
      button.selectable = true;
      button.$elm.attr({
        tabindex: 1
      });
      button.$elm.focus(function() {
        if (!this.course.state.selected) {
          return this.course.$elm.trigger('click');
        }
      });
      button.$elm.keydown(function(event) {
        var i, myIndex, node, self, siblings, sibs, _i, _len;
        self = event.currentTarget;
        siblings = event.currentTarget.parentNode.childNodes;
        myIndex = null;
        for (i = _i = 0, _len = siblings.length; _i < _len; i = ++_i) {
          node = siblings[i];
          if (node === self) {
            myIndex = i;
          }
        }
        sibs = {};
        if (myIndex + 1 < siblings.length) {
          sibs.right = siblings[myIndex + 1];
        }
        if (myIndex - 1 >= 0) {
          sibs.left = siblings[myIndex - 1];
        }
        switch (event.keyCode) {
          case 37:
            if (sibs.left) {
              return $(sibs.left).focus();
            }
            break;
          case 38:
            return '';
          case 39:
            if (sibs.right) {
              return $(sibs.right).focus();
            }
            break;
          case 40:
            return '';
          case 32:
          case 13:
            return $(self).click();
        }
      });
    }
    return $(button.getButton()).click(function(evt) {
      var newState;
      if ($(evt.currentTarget).hasClass('defunct')) {
        return;
      }
      evt.stopPropagation();
      if (ops.selectable && !button.state.selected) {
        _this.selectCourse(button);
        $(evt.currentTarget).focus();
        return;
      }
      if ($(evt.currentTarget).hasClass('noclick')) {
        $(evt.currentTarget).removeClass('noclick');
        return;
      }
      newState = CourseManager.toggleState(button.state);
      if (ops.insertOnClick) {
        _this.ensureDisplayedInYearChart(button);
      }
      return _this.updateCourseState(button, newState);
    });
  };

  CourseManager.prototype.makeCourseButtonDraggable = function(button, ops) {
    if (ops == null) {
      ops = {};
    }
    return $(button.getButton()).draggable({
      containment: '#main',
      scroll: true,
      helper: 'clone',
      revert: 'invalid',
      distance: '25',
      opacity: 0.7,
      zIndex: 1000
    });
  };

  CourseManager.prototype.makeElectivesButtonDroppable = function(button, ops) {
    var _this = this;
    if (ops == null) {
      ops = {
        clone: false
      };
    }
    button.getButton();
    return button.$coursesDiv.droppable({
      greedy: true,
      hoverClass: 'highlight',
      tolerance: 'pointer',
      accept: function(ui) {
        return ui[0].course instanceof BasicCourse;
      },
      drop: function(event, ui) {
        if (!ui.draggable[0].course) {
          return false;
        }
        button.addCourse(ui.draggable[0].course);
        _this.courseMoved(ui.draggable[0].course);
        window.courseManager.selectCourse(ui.draggable[0].course);
        return _this.updateCourseState(ui.draggable[0].course, {
          required: false,
          elective: true
        });
      }
    });
  };

  CourseManager.prototype.makeElectivesButtonClickable = function(button, ops) {
    var _this = this;
    if (ops == null) {
      ops = {};
    }
    return button.$elm.click(function() {
      return _this.selectCourse(button);
    });
  };

  CourseManager.prototype.courseMoved = function(course) {
    var hash, _ref, _results;
    _ref = this.sortableCourses;
    _results = [];
    for (hash in _ref) {
      course = _ref[hash];
      if (course instanceof ElectivesButton) {
        _results.push(this.updateElectivesButton(course));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  CourseManager.prototype.createCourseStateButton = function(course) {
    var updateCourse,
      _this = this;
    if (this.courseData[course]) {
      course = new CourseStateButton(this.courseData[course], true);
    } else {
      course = new CourseStateButton(course);
      updateCourse = function() {
        if (!_this.courseData[course]) {
          throw new Error("Course " + course + " was loaded in dep. " + course.subject + ", but wasn't available");
        }
        course.update(_this.courseData[course]);
        return course.wasSynced = true;
      };
      this.loadSubjectData(course.subject, updateCourse);
    }
    this.sortableCoursesStateButtons[course] = course;
    this.makeCourseStateButtonClickable(course);
    this.addCourse(course);
    this.initButtonState(course);
    return course;
  };

  CourseManager.prototype.makeCourseStateButtonClickable = function(button) {
    var _this = this;
    return button.$elm.find('input').bind('change', function(evt) {
      var state, val;
      val = $(evt.currentTarget).parent().find('input:checked').val();
      if (!(val != null) || val === 'none') {
        state = {
          required: false,
          elective: false
        };
      }
      if (val === 'required') {
        state = {
          required: true,
          elective: false
        };
      }
      if (val === 'elective') {
        state = {
          required: false,
          elective: true
        };
      }
      return _this.updateCourseState(button, state);
    });
  };

  CourseManager.toggleState = function(state) {
    var ret;
    ret = {
      required: false,
      elective: false
    };
    if (state.required) {
      ret.elective = true;
    }
    if (state.elective) {
      ret.elective = false;
    }
    if (!(state.required || state.elective)) {
      ret.required = true;
    }
    return ret;
  };

  CourseManager.prototype.initButtonState = function(button) {
    var c, state;
    if (!this.courses[button] || this.courses[button].length === 0) {
      return;
    }
    c = this.courses[button][0];
    state = {
      required: c.state.required,
      elective: c.state.elective
    };
    return button.setState(state, {
      forceUpdate: true
    });
  };

  CourseManager.prototype.getSelectedCourses = function() {
    var hash, list, ret, _ref, _ref1, _ref2;
    ret = [];
    _ref = this.courses;
    for (hash in _ref) {
      list = _ref[hash];
      if (((_ref1 = list[0]) != null ? _ref1.state.required : void 0) || ((_ref2 = list[0]) != null ? _ref2.state.elective : void 0)) {
        ret.push(list[0]);
      }
    }
    return ret;
  };

  CourseManager.prototype.loadSubjectData = function(subject, callback, ops) {
    var ajaxArgs, doAllCallbacks, error,
      _this = this;
    if (ops == null) {
      ops = {};
    }
    this.onSubjectLoadedCallbacks[subject] = this.onSubjectLoadedCallbacks[subject] || [];
    this.onSubjectLoadedCallbacks[subject].push(callback);
    doAllCallbacks = function() {
      var func;
      while (func = _this.onSubjectLoadedCallbacks[subject].shift()) {
        func();
      }
      return _this.loadingStatus[subject] = 'loaded';
    };
    if (this.loadedSubjects[subject] && !ops.force) {
      doAllCallbacks();
      return;
    }
    if (this.loadingStatus[subject] === 'loading' && !ops.force) {
      return;
    }
    this.loadingStatus[subject] = 'loading';
    error = function(e) {
      console.log('ajax error');
      throw e;
    };
    ajaxArgs = {
      url: "course_data/" + subject + ".json",
      dataType: 'json',
      success: this.courseDataLoaded,
      error: [
        (function() {
          return _this.loadingStatus[subject] = 'failed';
        }), ops.error || error
      ],
      complete: doAllCallbacks
    };
    return $.ajax(ajaxArgs);
  };

  CourseManager.prototype.courseDataLoaded = function(data, textState, jsXHR) {
    var c, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      c = data[_i];
      this.courseData[BasicCourse.hashCourse(c)] = c;
      _results.push(this.loadedSubjects[c.subject] = true);
    }
    return _results;
  };

  CourseManager.prototype.showCoursesOfSubject = function(subject, ops) {
    var showCourses,
      _this = this;
    if (ops == null) {
      ops = {};
    }
    showCourses = function() {
      var course, hash, _ref, _results;
      _ref = _this.sortableCourses;
      _results = [];
      for (hash in _ref) {
        course = _ref[hash];
        if (course.subject === subject) {
          _results.push(course.$elm.show(ops.animate));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    if (this.loadedSubjects[subject]) {
      this.populateYearChartWithSubject(subject, ops);
      showCourses();
    } else {
      ops = dupObject(ops);
      ops.recursionDepth = (ops.recursionDepth || 0) + 1;
      if (ops.recursionDepth < 10) {
        this.loadSubjectData(subject, (function() {
          return _this.showCoursesOfSubject(subject, ops);
        }), ops);
      } else {
        if (ops.error) {
          ops.error();
        }
        console.log(Error("Reached maximum recusion depth when loading " + subject));
      }
    }
  };

  CourseManager.prototype.hideCoursesOfSubject = function(subject, ops) {
    var course, hash, _ref;
    if (ops == null) {
      ops = {};
    }
    _ref = this.sortableCourses;
    for (hash in _ref) {
      course = _ref[hash];
      if (course.subject === subject && course.state.required === false && course.state.elective === false) {
        if (course.elm) {
          course.$elm.hide(ops.animate);
        }
      }
    }
  };

  CourseManager.prototype.hideCourse = function(course, ops) {
    var hash, _ref;
    if (ops == null) {
      ops = {};
    }
    hash = BasicCourse.hashCourse(course);
    if (this.sortableCourses[hash]) {
      course = this.sortableCourses[hash];
      if (course.state.required === false && course.state.elective === false) {
        return (_ref = course.$elm) != null ? _ref.hide(ops.animate) : void 0;
      }
    }
  };

  CourseManager.prototype.populateYearChartWithSubject = function(subject, ops) {
    var container, course, data, hash, leadingNumber, list, year, years, _i, _j, _len, _len1, _ref, _ref1;
    years = {};
    _ref = this.courseData;
    for (hash in _ref) {
      data = _ref[hash];
      if (data.subject === subject && !this.sortableCourses[hash]) {
        leadingNumber = data.number.charAt(0);
        years[leadingNumber] = years[leadingNumber] || [];
        years[leadingNumber].push(data);
      }
    }
    _ref1 = ['1', '2', '3', '4'];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      year = _ref1[_i];
      list = years[year] || [];
      list.sort();
      container = $(".year" + year + " .courses");
      for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
        data = list[_j];
        course = this.createCourseButton(data, {
          clickable: true,
          selectable: true,
          draggable: true
        });
        this.sortableCourses[course] = course;
        container.append(course.getButton());
        if (ops.animate) {
          course.$elm.hide();
          course.$elm.show(ops.animate);
        }
      }
    }
  };

  CourseManager.prototype.ensureDisplayedInYearChart = function(course, ops) {
    var hash, leadingNumber, _ref, _ref1,
      _this = this;
    if (ops == null) {
      ops = {};
    }
    hash = BasicCourse.hashCourse(course);
    if (!this.courseData[hash] && this.loadedSubjects[course.subject]) {
      if (ops.error) {
        ops.error();
      }
      throw new Error("" + hash + " cannot be loaded.  Does not appear to exist...");
    }
    if (!this.courseData[hash]) {
      this.loadSubjectData(course.subject, (function() {
        return _this.ensureDisplayedInYearChart(course, ops);
      }), ops);
    }
    if (this.sortableCourses[hash]) {
      this.sortableCourses[hash].$elm.show();
      return;
    }
    leadingNumber = this.courseData[hash].number.charAt(0);
    if (leadingNumber === '1' || leadingNumber === '2' || leadingNumber === '3' || leadingNumber === '4') {
      course = this.createCourseButton(this.courseData[hash], {
        clickable: true,
        selectable: true,
        draggable: true
      });
      this.sortableCourses[course] = course;
      $(".year" + leadingNumber + " .courses").append(course.getButton());
      if (ops.animate) {
        if ((_ref = course.$elm) != null) {
          _ref.hide();
        }
        return (_ref1 = course.$elm) != null ? _ref1.show(ops.animate) : void 0;
      }
    }
  };

  CourseManager.prototype.showUnmetPrereqs = function() {
    var activeCourses, course, div, hash, prereqs, _ref;
    activeCourses = [];
    _ref = this.sortableCourses;
    for (hash in _ref) {
      course = _ref[hash];
      if (course.state.required || course.state.elective) {
        activeCourses.push(course);
      }
    }
    prereqs = PrereqUtils.computePrereqTree(activeCourses, activeCourses);
    div = PrereqUtils.prereqsToDivs(prereqs, this);
    return $('#unmet-prereq-list').html(div);
  };

  CourseManager.prototype.createDotGraph = function() {
    this.updateGraphState();
    return this.graphState.toDot();
  };

  return CourseManager;

})();

/*
# Utility functions for dealing with lists of courses and their prereqs
*/


CourseUtils = {
  updatePrereqTags: function() {
    var c, hash, k, prereqs, selected, unmet, _i, _len, _ref, _ref1;
    selected = CourseUtils.getSelectedCourses();
    prereqs = CourseUtils.computePrereqTree(selected, selected);
    unmet = {};
    _ref = Course.flattenPrereqs(prereqs);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      unmet[Course.hashCourse(c)] = true;
    }
    _ref1 = window.courses;
    for (hash in _ref1) {
      c = _ref1[hash];
      c.setState({
        prereq: !!unmet[hash]
      });
    }
    console.log(((function() {
      var _results;
      _results = [];
      for (k in unmet) {
        _results.push(k);
      }
      return _results;
    })()).join(' '));
    return unmet;
  }
};

PrereqUtils = {
  prereqsToString: function(prereq) {
    var p;
    if (!(prereq != null)) {
      return "";
    }
    if (prereq.subject) {
      return Course.hashCourse(prereq);
    }
    if (prereq.op) {
      if (typeof prereq.op === 'string') {
        return "(" + ((function() {
          var _i, _len, _ref, _results;
          _ref = prereq.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(PrereqUtils.prereqsToString(p));
          }
          return _results;
        })()).join(" " + prereq.op + " ") + ")";
      } else {
        return "";
      }
    }
  },
  prunePrereqs: function(prereq, courses) {
    var course, prunedBranch, ret, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    if (!(prereq != null)) {
      throw new Error("Yikes.  We errored while pruning the prereqs!");
    }
    ret = {
      op: 'and',
      data: []
    };
    if (prereq.subject) {
      if (courses.indexOf(BasicCourse.hashCourse(prereq)) === -1) {
        ret.data.push(prereq);
      }
    }
    switch (prereq.op) {
      case 'or':
        ret.op = 'or';
        _ref = prereq.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          course = _ref[_i];
          prunedBranch = PrereqUtils.prunePrereqs(course, courses);
          if (((_ref1 = prunedBranch.data) != null ? _ref1.length : void 0) === 0) {
            return {
              op: 'and',
              data: []
            };
          }
          ret.data.push(prunedBranch);
        }
        break;
      case 'and':
        _ref2 = prereq.data;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          course = _ref2[_j];
          prunedBranch = PrereqUtils.prunePrereqs(course, courses);
          if (((_ref3 = prunedBranch.data) != null ? _ref3.length : void 0) !== 0) {
            ret.data.push(prunedBranch);
          }
        }
    }
    return ret;
  },
  simplifyPrereqs: function(prereq) {
    var removeParen;
    removeParen = function(prereq) {
      var p;
      if (!(prereq.data != null)) {
        return prereq;
      }
      if (prereq.data.length === 1) {
        return removeParen(prereq.data[0]);
      }
      return {
        op: prereq.op,
        data: (function() {
          var _i, _len, _ref, _results;
          _ref = prereq.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            _results.push(removeParen(p));
          }
          return _results;
        })()
      };
    };
    return removeParen(prereq);
  },
  flattenPrereqs: function(prereq) {
    var c, ret, _i, _len, _ref;
    if (prereq != null ? prereq.subject : void 0) {
      return [prereq];
    }
    if (prereq != null ? prereq.op : void 0) {
      ret = [];
      _ref = prereq.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        ret = ret.concat(PrereqUtils.flattenPrereqs(c));
      }
      return ret;
    }
    return [];
  },
  prereqsToDivs: function(prereq, manager) {
    var course, courseElm, divs, elm, number, prereqsToDivs, subject, _i, _len, _ref;
    prereqsToDivs = function(prereq) {
      var hash, p;
      if (!(prereq != null)) {
        return "";
      }
      if (prereq.subject) {
        hash = BasicCourse.hashCourse(prereq);
        return "<course id='" + hash + "' subject='" + prereq.subject + "' number='" + prereq.number + "'>" + hash + "</course>";
      }
      if (prereq.op) {
        if (typeof prereq.op === 'string') {
          return ("<ul class='prereq-tree prereq-" + prereq.op + "'><li class='prereq-tree prereq-" + prereq.op + "'>") + ((function() {
            var _i, _len, _ref, _results;
            _ref = prereq.data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              p = _ref[_i];
              _results.push(prereqsToDivs(p));
            }
            return _results;
          })()).join("</li><li class='prereq-tree prereq-" + prereq.op + "'>") + "</ul>";
        } else {
          return "";
        }
      }
    };
    divs = $("<div>" + (prereqsToDivs(prereq)) + "</div>");
    if (!manager) {
      return divs;
    }
    _ref = divs.find('course');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elm = _ref[_i];
      subject = elm.getAttribute('subject');
      number = elm.getAttribute('number');
      course = manager.createCourseButton({
        subject: subject,
        number: number
      }, {
        clickable: true,
        insertOnClick: true
      });
      courseElm = course.getButton();
      elm.parentNode.replaceChild(courseElm, elm);
    }
    return divs;
  },
  computePrereqTree: function(courses, selected) {
    var course, hashify, pruned, ret, s, _i, _len, _ref;
    if (selected == null) {
      selected = [];
    }
    if (!(courses != null)) {
      throw new Error("computePrereqTree requires a list of course hashes");
    }
    hashify = function(s) {
      if (typeof s === 'string') {
        return s;
      }
      return BasicCourse.hashCourse(s);
    };
    selected = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = selected.length; _i < _len; _i++) {
        s = selected[_i];
        _results.push(hashify(s));
      }
      return _results;
    })();
    ret = {
      op: 'and',
      data: []
    };
    for (_i = 0, _len = courses.length; _i < _len; _i++) {
      course = courses[_i];
      if (typeof course === 'string') {
        throw new Error("cannot computePrereqTree with courses given as strings");
      }
      if (!course.wasSynced) {
        throw new Error("attempting to compute prereqs of " + course + " when data isn't synced");
      }
      if (course.prereqs != null) {
        pruned = PrereqUtils.prunePrereqs(course.prereqs, selected);
        if (((_ref = pruned.data) != null ? _ref.length : void 0) > 0) {
          pruned.requiredBy = course;
          ret.data.push(pruned);
        }
      }
    }
    ret = PrereqUtils.simplifyPrereqs(ret);
    return ret;
  }
};

/*
# Parent class of various course buttons
*/


BasicCourse = (function() {

  BasicCourse.hashCourse = function(course) {
    return "" + course.subject + " " + course.number;
  };

  function BasicCourse(data, synced) {
    var _ref;
    this.data = data;
    if (synced == null) {
      synced = false;
    }
    this.hash = BasicCourse.hashCourse(this.data);
    _ref = this.data, this.subject = _ref.subject, this.number = _ref.number, this.prereqs = _ref.prereqs;
    this.state = {
      required: false,
      elective: false,
      selected: false,
      prereq: false
    };
    this.wasSynced = synced;
  }

  BasicCourse.prototype.toString = function() {
    return this.hash;
  };

  BasicCourse.prototype.update = function(data) {
    this.data = data;
    return this.prereqs = this.data.prereqs;
  };

  BasicCourse.prototype.setState = function(state) {
    var ret, s, v;
    ret = {};
    for (s in state) {
      v = state[s];
      if (this.state[s] !== v) {
        ret[s] = v;
        this.state[s] = v;
      }
    }
    return ret;
  };

  return BasicCourse;

})();

/*
# Rectangular button that displays a course's number and state
*/


CourseButton = (function(_super) {

  __extends(CourseButton, _super);

  function CourseButton(data) {
    CourseButton.__super__.constructor.call(this, data);
    this.getButton();
  }

  CourseButton.prototype.setState = function(state, ops) {
    var changedState, s, v;
    if (ops == null) {
      ops = {};
    }
    changedState = CourseButton.__super__.setState.call(this, state);
    if (!ops.forceUpdate) {
      state = changedState;
    }
    if (!this.elm) {
      return state;
    }
    for (s in state) {
      v = state[s];
      if (v) {
        this.$elm.addClass(s);
      } else {
        this.$elm.removeClass(s);
      }
    }
    return state;
  };

  CourseButton.prototype.getButton = function() {
    if (this.elm) {
      return this.elm;
    }
    this.$elm = $("<div class='course' subject='" + this.subject + "' number='" + this.number + "'><div class='annotation'></div><div class='number'>" + this.subject + " " + this.number + "</div></div>");
    this.setTooltip(titleCaps(this.data.title));
    this.$elm.disableSelection();
    this.elm = this.$elm[0];
    this.elm.course = this;
    this.setState(this.state);
    return this.elm;
  };

  CourseButton.prototype.removeButton = function() {
    if (!this.elm) {
      return;
    }
    this.elm.course = null;
    this.$elm.remove();
    return this.elm = this.$elm = null;
  };

  CourseButton.prototype.setTooltip = function(tip) {
    if (tip) {
      return this.$elm.attr({
        title: tip
      });
    }
  };

  return CourseButton;

})(BasicCourse);

/*
# Set of three toggle buttons that change (and reflect) the state of a course
*/


CourseStateButton = (function(_super) {

  __extends(CourseStateButton, _super);

  function CourseStateButton(data) {
    CourseStateButton.__super__.constructor.call(this, data);
    this.getButton();
  }

  CourseStateButton.prototype.getButton = function() {
    if (this.elm) {
      return this.elm;
    }
    this.$elm = $("<div class='course-status'>\n        <input type='radio' name='state' value='none' id='course-notincluded' /><label for='course-notincluded'>Not Included</label>\n        <input type='radio' name='state' value='required' id='course-required' /><label for='course-required'>Required</label>\n        <input type='radio' name='state' value='elective' id='course-elective' /><label for='course-elective'>Elective</label>\n</div>");
    this.$elm.buttonset();
    return this.elm = this.$elm[0];
  };

  CourseStateButton.prototype.setState = function(state, ops) {
    var changedState,
      _this = this;
    if (ops == null) {
      ops = {};
    }
    changedState = CourseStateButton.__super__.setState.call(this, state);
    if (!ops.forceUpdate) {
      state = changedState;
    }
    if ((!this.elm || Object.keys(state).length === 0) && !ops.forceUpdate) {
      return state;
    }
    this.$elm.find('input').attr('checked', false);
    if (this.state.required) {
      this.$elm.find('input[value=required]').attr('checked', true);
    } else if (this.state.elective) {
      this.$elm.find('input[value=elective]').attr('checked', true);
    } else {
      this.$elm.find('input[value=none]').attr('checked', true);
    }
    window.setTimeout((function() {
      return _this.$elm.buttonset('refresh');
    }), 0);
    return state;
  };

  CourseStateButton.prototype.removeButton = function() {
    if (!this.elm) {
      return;
    }
    this.elm.course = null;
    this.$elm.remove();
    return this.elm = this.$elm = null;
  };

  return CourseStateButton;

})(BasicCourse);

/*
# Holds a group of courses
*/


Electives = (function() {

  function Electives(data) {
    this.title = data.title, this.requirements = data.requirements, this.number = data.number;
    this.courses = dupObject(data.courses || {});
    this.state = {};
    if (!(this.requirements != null)) {
      this.requirements = {
        units: 1.5,
        unitLabel: 'units'
      };
    }
    this.subject = this.title;
    this.number = this.number || Math.random().toFixed(8);
    this.hash = BasicCourse.hashCourse(this);
  }

  Electives.prototype.toString = function() {
    return this.hash;
  };

  Electives.prototype.addCourse = function(course) {
    return this.courses[course] = course;
  };

  Electives.prototype.removeCourse = function(course) {
    return delete this.courses[course];
  };

  Electives.prototype.setState = function(state) {
    var ret, s, v;
    ret = {};
    for (s in state) {
      v = state[s];
      if (this.state[s] !== v) {
        ret[s] = v;
        this.state[s] = v;
      }
    }
    return ret;
  };

  Electives.prototype.update = function(data) {
    var k, v;
    for (k in data) {
      v = data[k];
      this[k] = v;
    }
    return this.hash = BasicCourse.hashCourse(this);
  };

  Electives.prototype.getValues = function() {
    return {
      title: this.title,
      requirements: this.requirements,
      number: this.number,
      courses: this.courses
    };
  };

  return Electives;

})();

ElectivesButton = (function(_super) {

  __extends(ElectivesButton, _super);

  function ElectivesButton(data, manager) {
    this.manager = manager;
    ElectivesButton.__super__.constructor.call(this, data);
    this.selectable = true;
    this.getButton();
  }

  ElectivesButton.prototype.setState = function(state, ops) {
    var changedState, s, v;
    if (ops == null) {
      ops = {};
    }
    changedState = ElectivesButton.__super__.setState.call(this, state);
    if (!ops.forceUpdate) {
      state = changedState;
    }
    if (!this.elm) {
      return state;
    }
    for (s in state) {
      v = state[s];
      if (v) {
        this.$elm.addClass(s);
      } else {
        this.$elm.removeClass(s);
      }
    }
    return state;
  };

  ElectivesButton.prototype.getButton = function() {
    var course, hash, _ref;
    if (this.elm) {
      return this.elm;
    }
    this.$elm = $("<div class=\"electives-block\" subject=\"" + this.subject + "\" number=\"" + this.number + "\">\n	<div class=\"title\">" + this.title + "</div>\n	<div class=\"requirement\">At least " + this.requirements.units + " " + this.requirements.unitLabel + "</div>\n	<div class=\"courses-list\"><span class=\"droptext\">Drop Here to Add Courses</span></div>\n</div>");
    this.elm = this.$elm[0];
    this.elm.course = this;
    this.$coursesDiv = this.$elm.find('.courses-list');
    _ref = this.courses;
    for (hash in _ref) {
      course = _ref[hash];
      this.addCourse(course);
    }
    return this.elm;
  };

  ElectivesButton.prototype.addCourse = function(course) {
    ElectivesButton.__super__.addCourse.call(this, course);
    if (!course.elm) {
      course = this.courses[BasicCourse.hashCourse(course)] = new CourseButton(course.data);
    }
    this.$coursesDiv.append(course.elm);
    return this.updateDropTextVisibility();
  };

  ElectivesButton.prototype.removeCourse = function(course, ops) {
    var $elm;
    if (ops == null) {
      ops = {
        detach: true
      };
    }
    if (ops.detach) {
      $elm = this.courses[BasicCourse.hashCourse(course)].$elm;
      if ($elm) {
        $elm.detach();
      }
    }
    ElectivesButton.__super__.removeCourse.call(this, course);
    return this.updateDropTextVisibility();
  };

  ElectivesButton.prototype.update = function(data) {
    var elm, _i, _len, _ref;
    ElectivesButton.__super__.update.call(this, data);
    this.courses = {};
    _ref = this.$elm.find('.courses-list').children();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elm = _ref[_i];
      if (elm.course) {
        this.courses[elm.course] = elm.course;
      }
    }
    this.$elm.find('.title').html(this.title);
    this.$elm.find('.requirement').html("At least " + this.requirements.units + " " + this.requirements.unitLabel);
    this.$elm.attr({
      subject: this.subject,
      number: this.number
    });
    return this.updateDropTextVisibility();
  };

  ElectivesButton.prototype.updateDropTextVisibility = function() {
    if (Object.keys(this.courses).length === 0) {
      return this.$elm.find('.droptext').show();
    } else {
      return this.$elm.find('.droptext').hide();
    }
  };

  return ElectivesButton;

})(Electives);

ElectivesButtonEditor = (function(_super) {

  __extends(ElectivesButtonEditor, _super);

  function ElectivesButtonEditor(data, manager) {
    this.manager = manager;
    ElectivesButtonEditor.__super__.constructor.call(this, data);
    this.selectable = true;
    this.getButton();
  }

  ElectivesButtonEditor.prototype.setState = function(state, ops) {
    var changedState, s, v;
    if (ops == null) {
      ops = {};
    }
    changedState = ElectivesButtonEditor.__super__.setState.call(this, state);
    if (!ops.forceUpdate) {
      state = changedState;
    }
    if (!this.elm) {
      return state;
    }
    for (s in state) {
      v = state[s];
      if (v) {
        this.$elm.addClass(s);
      } else {
        this.$elm.removeClass(s);
      }
    }
    return state;
  };

  ElectivesButtonEditor.prototype.getButton = function() {
    var course, hash, update, _ref,
      _this = this;
    if (this.elm) {
      return this.elm;
    }
    this.$elm = $("<div class='elective-editable'>\n    <div class='title'>Title: <input type='text' value='" + this.title + "' class='ui-state-default ui-combobox-input ui-widget ui-widget-content ui-corner-all'></input></div>\n    <div class='requirements'>At least <input type='text' value='" + this.requirements.units + "' class='ui-state-default ui-combobox-input ui-widget ui-widget-content ui-corner-all'></input> " + this.requirements.unitLabel + "</div>\n    Elective Courses: <div class='dropbox courses-list'><span class='droptext'>Use the Year Chart to Add Courses</span></div>\n</div>");
    this.elm = this.$elm[0];
    this.$coursesDiv = this.$elm.find('.courses-list');
    _ref = this.courses;
    for (hash in _ref) {
      course = _ref[hash];
      this.addCourse(course);
    }
    update = function(event) {
      if (_this.manager) {
        return _this.manager.updateElectivesButton(_this);
      }
    };
    this.$elm.find('.title input').change(update);
    this.$elm.find('.requirements input').change(update);
    return this.elm;
  };

  ElectivesButtonEditor.prototype.addCourse = function(course) {
    ElectivesButtonEditor.__super__.addCourse.call(this, course);
    if (!course.elm) {
      course = this.courses[BasicCourse.hashCourse(course)] = new CourseButton(course.data);
    }
    this.$coursesDiv.append(course.elm);
    return this.updateDropTextVisibility();
  };

  ElectivesButtonEditor.prototype.removeCourse = function(course, ops) {
    var $elm;
    if (ops == null) {
      ops = {
        detach: true
      };
    }
    if (ops.detach) {
      $elm = this.courses[BasicCourse.hashCourse(course)].$elm;
      if ($elm) {
        $elm.detach();
      }
    }
    ElectivesButtonEditor.__super__.removeCourse.call(this, course);
    return this.updateDropTextVisibility();
  };

  ElectivesButtonEditor.prototype.update = function(data) {
    ElectivesButtonEditor.__super__.update.call(this, data);
    this.$elm.find('.title input').val(this.title);
    this.$elm.find('.requirements .input').val(this.requirements.units);
    return this.updateDropTextVisibility();
  };

  ElectivesButtonEditor.prototype.getValues = function() {
    this.title = this.$elm.find('.title input').val();
    this.requirements.units = this.$elm.find('.requirements input').val();
    return ElectivesButtonEditor.__super__.getValues.call(this);
  };

  ElectivesButtonEditor.prototype.updateDropTextVisibility = function() {
    if (Object.keys(this.courses).length === 0) {
      return this.$elm.find('.droptext').show();
    } else {
      return this.$elm.find('.droptext').hide();
    }
  };

  return ElectivesButtonEditor;

})(Electives);

/*
# Class to hold the state of the current graph.  This object
# can be used for loading and saving and will preserve
# invisible and custom-added edges.
*/


Graph = (function() {

  function Graph() {
    this.dirty = true;
    this.nodes = {};
    this.edges = {};
    this.clusters = {};
  }

  Graph.prototype.toJSON = function() {
    var c, cluster, edge, elective, node, ret, _, _ref, _ref1, _ref2;
    ret = {
      nodes: [],
      edges: [],
      clusters: []
    };
    _ref = this.nodes;
    for (_ in _ref) {
      node = _ref[_];
      ret.nodes.push({
        course: {
          subject: node.course.subject,
          number: node.course.number,
          state: node.course.state
        },
        year: node.year
      });
    }
    _ref1 = this.edges;
    for (_ in _ref1) {
      edge = _ref1[_];
      ret.edges.push({
        edge: ['' + edge.edge[0], '' + edge.edge[1]],
        properties: edge.properties || {}
      });
    }
    _ref2 = this.clusters;
    for (_ in _ref2) {
      cluster = _ref2[_];
      elective = cluster.cluster;
      ret.clusters.push({
        cluster: {
          subject: elective.subject,
          number: elective.number,
          title: elective.title,
          requirements: {
            units: elective.requirements.units,
            unitLabel: elective.requirements.unitLabel
          }
        },
        year: cluster.year,
        courses: (function() {
          var _i, _len, _ref3, _results;
          _ref3 = cluster.courses;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            c = _ref3[_i];
            _results.push({
              subject: c.subject,
              number: c.number
            });
          }
          return _results;
        })()
      });
    }
    return JSON.stringify(ret);
  };

  Graph.prototype.fromJSON = function(str, ops) {
    var cluster, data, edge, hash, node, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    if (ops == null) {
      ops = {};
    }
    this.dirty = true;
    data = JSON.parse(str);
    _ref = data.nodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      hash = BasicCourse.hashCourse(node.course);
      this.nodes[hash] = node;
    }
    _ref1 = data.edges;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      edge = _ref1[_j];
      this.edges[edge.edge] = edge;
    }
    _ref2 = data.clusters;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      cluster = _ref2[_k];
      hash = BasicCourse.hashCourse(cluster.cluster);
      this.clusters[hash] = cluster;
    }
    return this;
  };

  Graph.prototype.addNode = function(course, ops) {
    if (ops == null) {
      ops = {};
    }
    this.dirty = true;
    return this.nodes[course] = {
      course: course,
      year: ops.year,
      term: ops.term
    };
  };

  Graph.prototype.removeNode = function(course) {
    this.dirty = true;
    return delete this.nodes[course];
  };

  Graph.prototype.addEdge = function(edge, ops) {
    if (ops == null) {
      ops = {};
    }
    this.dirty = true;
    return this.edges[edge] = {
      edge: edge,
      properties: ops.properties || {}
    };
  };

  Graph.prototype.removeEdge = function(edge) {
    this.dirty = true;
    return delete this.edges[edge];
  };

  Graph.prototype.pruneOrphanedEdges = function() {
    var edge, hash, _ref, _results;
    _ref = this.edges;
    _results = [];
    for (hash in _ref) {
      edge = _ref[hash];
      if ((!this.nodes[edge.edge[0]]) || (!this.nodes[edge.edge[0]])) {
        _results.push(this.removeEdge(hash));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Graph.prototype.generateEdges = function(ops) {
    var c, course, edge, hash, i, j, list, mat, node, numDeleted, optimizedMat, originalEdges, p, prereqs, row, v, _, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    if (ops == null) {
      ops = {
        optimize: true
      };
    }
    originalEdges = this.edges;
    this.edges = {};
    _ref = this.nodes;
    for (_ in _ref) {
      node = _ref[_];
      course = node.course;
      if (course.prereqs != null) {
        prereqs = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = PrereqUtils.flattenPrereqs(course.prereqs);
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            c = _ref1[_i];
            _results.push(BasicCourse.hashCourse(c));
          }
          return _results;
        })();
        for (_i = 0, _len = prereqs.length; _i < _len; _i++) {
          p = prereqs[_i];
          if (this.nodes[p]) {
            edge = [p, BasicCourse.hashCourse(course)];
            this.edges[edge] = {
              edge: edge,
              properties: {
                autoGenerated: true
              }
            };
          }
        }
      }
    }
    if (ops.optimize) {
      numDeleted = 0;
      _ref1 = this._generateAdjacencyMatrix(), mat = _ref1.mat, list = _ref1.list;
      optimizedMat = this._optimizeEdges(mat);
      for (i = _j = 0, _len1 = mat.length; _j < _len1; i = ++_j) {
        row = mat[i];
        for (j = _k = 0, _len2 = row.length; _k < _len2; j = ++_k) {
          v = row[j];
          if (v) {
            if (!optimizedMat[i][j]) {
              numDeleted += 1;
              edge = [list[i], list[j]];
              delete this.edges[edge];
            }
          }
        }
      }
      console.log(numDeleted, 'edges deleted');
    }
    for (hash in originalEdges) {
      edge = originalEdges[hash];
      if (!((_ref2 = edge.properties) != null ? _ref2.autogenerated : void 0)) {
        this.edges[hash] = edge;
      }
    }
    return this.edges;
  };

  Graph.prototype.toDot = function() {
    var cluster, course, courses, createAnonymousSubgraph, edge, elective, graph, hash, i, index, labelWidth, levels, list, marker, mat, node, prevMarker, rankSubgraph, subgraph, term, termClust, termSubgraph, termSubgraphs, year, yearSubgraph, yearSubgraphs, _, _i, _j, _k, _l, _len, _len1, _len2, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    createAnonymousSubgraph = function(parent) {
      var subgraph;
      subgraph = graph.addSubgraph(null, parent);
      subgraph.attrs['rank'] = 'same';
      return subgraph;
    };
    graph = new DotGraph();
    graph.rootGraph.type = 'digraph';
    graph.rootGraph.attrs['rankdir'] = 'LR';
    if (this.title) {
      graph.rootGraph.attrs['label'] = "" + this.title;
      graph.rootGraph.attrs['_title'] = "" + this.title;
      graph.rootGraph.attrs['labelloc'] = "top";
      graph.rootGraph.attrs['labelfontsize'] = 30;
    }
    yearSubgraphs = {};
    termSubgraphs = {};
    for (year = _i = 1; _i <= 4; year = ++_i) {
      yearSubgraph = graph.addSubgraph("year" + year);
      yearSubgraphs[year] = yearSubgraph;
      termSubgraphs[year] = {};
      for (term = _j = 1; _j <= 3; term = ++_j) {
        termSubgraph = createAnonymousSubgraph(yearSubgraph);
        termSubgraph.attrs['rank'] = 'same';
        termSubgraphs[year][term] = termSubgraph;
        marker = "YEAR" + year + "TERM" + term;
        termSubgraph.nodes[marker] = true;
        graph.nodes[marker] = {
          attrs: {
            _year: year,
            _term: term,
            style: 'invis',
            height: 0,
            width: 1
          }
        };
      }
    }
    _ref = this.edges;
    for (_ in _ref) {
      edge = _ref[_];
      graph.edges[edge.edge] = [
        {
          edge: edge.edge
        }
      ];
    }
    _ref1 = this.nodes;
    for (_ in _ref1) {
      node = _ref1[_];
      course = node.course;
      hash = BasicCourse.hashCourse(course);
      graph.nodes[hash] = {
        attrs: {
          _name: hash,
          _title: titleCaps((_ref2 = course.data) != null ? _ref2.title : void 0),
          _year: node.year,
          shape: 'box',
          style: 'rounded'
        }
      };
    }
    for (year = _k = 1; _k <= 4; year = ++_k) {
      _ref3 = this._generateAdjacencyMatrix({
        filterByYear: year
      }), mat = _ref3.mat, list = _ref3.list;
      levels = this._stratify(mat);
      for (i = _l = 0, _len = levels.length; _l < _len; i = ++_l) {
        termClust = levels[i];
        rankSubgraph = termSubgraphs[year][i + 1];
        for (_m = 0, _len1 = termClust.length; _m < _len1; _m++) {
          index = termClust[_m];
          course = list[index];
          rankSubgraph.nodes[course] = true;
        }
      }
    }
    _ref4 = this.clusters;
    for (_ in _ref4) {
      cluster = _ref4[_];
      year = cluster.year, courses = cluster.courses;
      elective = cluster.cluster;
      if (courses.length === 0) {
        subgraph = termSubgraphs[year][1];
        hash = BasicCourse.hashCourse(elective);
        graph.nodes[hash] = {
          attrs: {
            _elective: true,
            _title: "" + elective.title + " (" + elective.requirements.units + " " + elective.requirements.unitLabel + ")",
            _year: year,
            shape: 'box',
            style: 'rounded,filled',
            color: 'invis',
            fillcolor: 'gray'
          }
        };
        subgraph.nodes[elective] = true;
      } else {
        subgraph = graph.addSubgraph("cluster" + (Math.random().toFixed(8).slice(3)));
        subgraph.attrs = {
          style: 'rounded,filled',
          color: 'gray',
          label: "" + elective.title + " (" + elective.requirements.units + " " + elective.requirements.unitLabel + ")",
          _title: "" + elective.title + " (" + elective.requirements.units + " " + elective.requirements.unitLabel + ")",
          _electivesBlock: true
        };
        for (_n = 0, _len2 = courses.length; _n < _len2; _n++) {
          course = courses[_n];
          hash = BasicCourse.hashCourse(course);
          subgraph.nodes[hash] = true;
          graph.nodes[hash].attrs['color'] = 'white';
          graph.nodes[hash].attrs['style'] = 'rounded,filled';
          graph.nodes[hash].attrs['_inElectivesBlock'] = true;
        }
      }
    }
    prevMarker = null;
    for (year = _o = 1; _o <= 4; year = ++_o) {
      for (term = _p = 1; _p <= 3; term = ++_p) {
        termSubgraph = termSubgraphs[year][term];
        marker = "YEAR" + year + "TERM" + term;
        if (Object.keys(termSubgraph.nodes).length > 1 || term === 1) {
          if (prevMarker) {
            edge = [prevMarker, marker];
            graph.edges[edge] = [
              {
                edge: edge,
                attrs: {
                  style: 'invis'
                }
              }
            ];
          }
          prevMarker = marker;
        } else {
          graph.removeNode(marker);
          graph.removeSubgraph(termSubgraph);
        }
      }
    }
    _ref5 = graph.nodes;
    for (hash in _ref5) {
      node = _ref5[hash];
      if ((_ref6 = node.attrs['style']) != null ? _ref6.match(/invis/) : void 0) {
        node.attrs['label'] = '';
        continue;
      }
      node.attrs['height'] = 42 / 72;
      labelWidth = Math.max(strWidthInEn(node.attrs['_title']), strWidthInEn(node.attrs['_name']));
      node.attrs['width'] = (labelWidth * 6.0 + 20) / 72;
      node.attrs['fixedsize'] = true;
    }
    return astToStr(graph.generateAst());
  };

  Graph.prototype._generateAdjacencyMatrix = function(ops) {
    var createRow, e, edge, n, nodeList, outEdges, ret, _, _ref;
    if (ops == null) {
      ops = {};
    }
    createRow = function(e) {
      var n;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = nodeList.length; _i < _len; _i++) {
          n = nodeList[_i];
          _results.push(e[n] ? 1 : 0);
        }
        return _results;
      })();
    };
    if (ops.filterByYear != null) {
      nodeList = (function() {
        var _results;
        _results = [];
        for (n in this.nodes) {
          if (this.nodes[n].year === ops.filterByYear) {
            _results.push(n);
          }
        }
        return _results;
      }).call(this);
    } else {
      nodeList = (function() {
        var _results;
        _results = [];
        for (n in this.nodes) {
          _results.push(n);
        }
        return _results;
      }).call(this);
    }
    outEdges = {};
    _ref = this.edges;
    for (_ in _ref) {
      e = _ref[_];
      edge = e.edge;
      outEdges[edge[0]] = outEdges[edge[0]] || {};
      outEdges[edge[0]][edge[1]] = true;
    }
    ret = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = nodeList.length; _i < _len; _i++) {
        n = nodeList[_i];
        _results.push(createRow(outEdges[n] || {}));
      }
      return _results;
    })();
    if (ret.length === 0) {
      ret.push([]);
    }
    return {
      mat: ret,
      list: nodeList
    };
  };

  Graph.prototype._matrixSpan = function(mat) {
    var i, iters, size, _i;
    size = mat[0].length;
    if (size <= 1) {
      return mat;
    }
    iters = Math.ceil(Math.log(size) / Math.log(2));
    for (i = _i = 0; 0 <= iters ? _i < iters : _i > iters; i = 0 <= iters ? ++_i : --_i) {
      mat = numeric.add(numeric.dot(mat, mat), mat);
    }
    return numeric.gt(mat, 0);
  };

  Graph.prototype._optimizeEdges = function(mat) {
    var existsOtherRoute, i, j, mat_span, mat_transpose, node, nodes, predicessors, ret, span, v, _i, _j, _k, _l, _len, _len1, _len2, _ref, _results;
    ret = numeric.clone(mat);
    mat_transpose = numeric.transpose(mat);
    mat_span = this._matrixSpan(mat);
    nodes = (function() {
      _results = [];
      for (var _i = 0, _ref = mat[0].length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    for (_j = 0, _len = nodes.length; _j < _len; _j++) {
      node = nodes[_j];
      predicessors = mat_transpose[node];
      for (i = _k = 0, _len1 = predicessors.length; _k < _len1; i = ++_k) {
        v = predicessors[i];
        if (!(v > 0 && i !== node)) {
          continue;
        }
        span = mat_span[i];
        existsOtherRoute = false;
        for (j = _l = 0, _len2 = span.length; _l < _len2; j = ++_l) {
          v = span[j];
          if (v > 0) {
            if (predicessors[j] > 0) {
              existsOtherRoute = true;
              break;
            }
          }
        }
        if (existsOtherRoute) {
          ret[i][node] = 0;
        }
      }
    }
    return ret;
  };

  Graph.prototype._stratify = function(mat, maxLevels) {
    var forwardSpan, i, incrementRanks, l, level, levels, mat_span, needUpdating, nodesOfCurrentLevel, rank, ranks, _i, _j, _len, _ref;
    if (maxLevels == null) {
      maxLevels = 3;
    }
    mat_span = this._matrixSpan(mat);
    levels = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i < 3; i = ++_i) {
        _results.push([]);
      }
      return _results;
    })();
    ranks = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = mat[0].length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(0);
      }
      return _results;
    })();
    incrementRanks = function(nodes) {
      var v, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = nodes.length; _i < _len; i = ++_i) {
        v = nodes[i];
        if (v > 0) {
          _results.push(ranks[i] += 1);
        }
      }
      return _results;
    };
    forwardSpan = function(nodes) {
      var ret, v, _i, _len;
      ret = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = mat[0].length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(false);
        }
        return _results;
      })();
      for (i = _i = 0, _len = nodes.length; _i < _len; i = ++_i) {
        v = nodes[i];
        if (v > 0) {
          numeric.oreq(ret, mat_span[i]);
        }
      }
      return ret;
    };
    for (level = _i = 0, _ref = maxLevels - 1; 0 <= _ref ? _i < _ref : _i > _ref; level = 0 <= _ref ? ++_i : --_i) {
      nodesOfCurrentLevel = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = ranks.length; _j < _len; _j++) {
          l = ranks[_j];
          _results.push(l === level);
        }
        return _results;
      })();
      needUpdating = forwardSpan(nodesOfCurrentLevel);
      incrementRanks(needUpdating);
    }
    for (i = _j = 0, _len = ranks.length; _j < _len; i = ++_j) {
      rank = ranks[i];
      levels[rank].push(i);
    }
    return levels;
  };

  return Graph;

})();
